From 410f7d73658f3cd8203f169f6e4469ec7ec0c924 Mon Sep 17 00:00:00 2001
From: Brock Noland <brock@cloudera.com>
Date: Tue, 7 May 2013 15:51:47 -0500
Subject: [PATCH 110/121] CDH-11992: Backport HIVE-4510 - HS2 doesn't nest exceptions properly (fun debug times)

---
 .../org/apache/hive/jdbc/HiveBaseResultSet.java    |   16 ++++++++++------
 .../java/org/apache/hive/jdbc/HiveConnection.java  |    7 +++----
 .../org/apache/hive/jdbc/HiveDatabaseMetaData.java |   14 +++++++-------
 .../java/org/apache/hive/jdbc/HiveStatement.java   |    4 ++--
 ql/src/java/org/apache/hadoop/hive/ql/Driver.java  |   12 ++++++------
 .../cli/operation/HiveCommandOperation.java        |    3 ++-
 6 files changed, 30 insertions(+), 26 deletions(-)

diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java
index 775ebee..4c1ab3b 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java
@@ -229,7 +229,7 @@ public abstract class HiveBaseResultSet implements ResultSet {
       return Date.valueOf((String) obj);
     } catch (Exception e) {
       throw new SQLException("Cannot convert column " + columnIndex
-              + " to date: " + e.toString());
+              + " to date: " + e.toString(), e);
     }
   }
 
@@ -258,7 +258,7 @@ public abstract class HiveBaseResultSet implements ResultSet {
       throw new Exception("Illegal conversion");
     } catch (Exception e) {
       throw new SQLException("Cannot convert column " + columnIndex
-              + " to double: " + e.toString());
+              + " to double: " + e.toString(), e);
     }
   }
 
@@ -287,7 +287,7 @@ public abstract class HiveBaseResultSet implements ResultSet {
       throw new Exception("Illegal conversion");
     } catch (Exception e) {
       throw new SQLException("Cannot convert column " + columnIndex
-              + " to float: " + e.toString());
+              + " to float: " + e.toString(), e);
     }
   }
 
@@ -311,7 +311,9 @@ public abstract class HiveBaseResultSet implements ResultSet {
       }
       throw new Exception("Illegal conversion");
     } catch (Exception e) {
-      throw new SQLException("Cannot convert column " + columnIndex + " to integer" + e.toString());
+      throw new SQLException(
+          "Cannot convert column " + columnIndex + " to integer" + e.toString(),
+          e);
     }
   }
 
@@ -331,7 +333,9 @@ public abstract class HiveBaseResultSet implements ResultSet {
       }
       throw new Exception("Illegal conversion");
     } catch (Exception e) {
-      throw new SQLException("Cannot convert column " + columnIndex + " to long: " + e.toString());
+      throw new SQLException(
+          "Cannot convert column " + columnIndex + " to long: " + e.toString(),
+          e);
     }
   }
 
@@ -578,7 +582,7 @@ public abstract class HiveBaseResultSet implements ResultSet {
       throw new Exception("Illegal conversion");
     } catch (Exception e) {
       throw new SQLException("Cannot convert column " + columnIndex
-              + " to short: " + e.toString());
+              + " to short: " + e.toString(), e);
     }
   }
 
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
index 5280195..504ac67 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
@@ -147,7 +147,7 @@ public class HiveConnection implements java.sql.Connection {
         }
       } catch (SaslException e) {
         throw new SQLException("Could not establish secure connection to "
-                  + uri + ": " + e.getMessage(), " 08S01");
+                  + uri + ": " + e.getMessage(), " 08S01", e);
       }
     }
 
@@ -156,9 +156,8 @@ public class HiveConnection implements java.sql.Connection {
     try {
       transport.open();
     } catch (TTransportException e) {
-      e.printStackTrace();
       throw new SQLException("Could not establish connection to "
-          + uri + ": " + e.getMessage(), " 08S01");
+          + uri + ": " + e.getMessage(), " 08S01", e);
     }
   }
 
@@ -179,7 +178,7 @@ public class HiveConnection implements java.sql.Connection {
         sessHandle = openResp.getSessionHandle();
       } catch (TException e) {
         throw new SQLException("Could not establish connection to "
-            + uri + ": " + e.getMessage(), " 08S01");
+            + uri + ": " + e.getMessage(), " 08S01", e);
       }
       isClosed = false;
     }
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java
index 3d1a969..e740d99 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveDatabaseMetaData.java
@@ -121,7 +121,7 @@ public class HiveDatabaseMetaData implements DatabaseMetaData {
     try {
       catalogResp = client.GetCatalogs(new TGetCatalogsReq(sessHandle));
     } catch (TException e) {
-      throw new SQLException(e.getMessage(), "08S01");
+      throw new SQLException(e.getMessage(), "08S01", e);
     }
     Utils.verifySuccess(catalogResp.getStatus());
 
@@ -194,7 +194,7 @@ public class HiveDatabaseMetaData implements DatabaseMetaData {
     try {
       colResp = client.GetColumns(colReq);
     } catch (TException e) {
-      throw new SQLException(e.getMessage(), "08S01");
+      throw new SQLException(e.getMessage(), "08S01", e);
     }
     Utils.verifySuccess(colResp.getStatus());
     // build the resultset from response
@@ -300,7 +300,7 @@ public class HiveDatabaseMetaData implements DatabaseMetaData {
     try {
       funcResp = client.GetFunctions(getFunctionsReq);
     } catch (TException e) {
-      throw new SQLException(e.getMessage(), "08S01");
+      throw new SQLException(e.getMessage(), "08S01", e);
     }
     Utils.verifySuccess(funcResp.getStatus());
 
@@ -541,7 +541,7 @@ public class HiveDatabaseMetaData implements DatabaseMetaData {
     try {
       schemaResp = client.GetSchemas(schemaReq);
     } catch (TException e) {
-      throw new SQLException(e.getMessage(), "08S01");
+      throw new SQLException(e.getMessage(), "08S01", e);
     }
     Utils.verifySuccess(schemaResp.getStatus());
 
@@ -585,7 +585,7 @@ public class HiveDatabaseMetaData implements DatabaseMetaData {
     try {
       tableTypeResp = client.GetTableTypes(new TGetTableTypesReq(sessHandle));
     } catch (TException e) {
-      throw new SQLException(e.getMessage(), "08S01");
+      throw new SQLException(e.getMessage(), "08S01", e);
     }
     Utils.verifySuccess(tableTypeResp.getStatus());
 
@@ -618,7 +618,7 @@ public class HiveDatabaseMetaData implements DatabaseMetaData {
     try {
       getTableResp = client.GetTables(getTableReq);
     } catch (TException e) {
-      throw new SQLException(e.getMessage(), "08S01");
+      throw new SQLException(e.getMessage(), "08S01", e);
     }
     Utils.verifySuccess(getTableResp.getStatus());
 
@@ -675,7 +675,7 @@ public class HiveDatabaseMetaData implements DatabaseMetaData {
     try {
       getTypeInfoResp = client.GetTypeInfo(getTypeInfoReq);
     } catch (TException e) {
-      throw new SQLException(e.getMessage(), "08S01");
+      throw new SQLException(e.getMessage(), "08S01", e);
     }
     Utils.verifySuccess(getTypeInfoResp.getStatus());
     return new HiveQueryResultSet.Builder()
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java
index c7f7a21..cf34edd 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java
@@ -118,7 +118,7 @@ public class HiveStatement implements java.sql.Statement {
     } catch (SQLException e) {
       throw e;
     } catch (Exception e) {
-      throw new SQLException(e.getMessage(), "08S01", e);
+      throw new SQLException(e.toString(), "08S01", e);
     }
   }
 
@@ -199,7 +199,7 @@ public class HiveStatement implements java.sql.Statement {
     } catch (SQLException eS) {
       throw eS;
     } catch (Exception ex) {
-      throw new SQLException(ex.toString(), "08S01");
+      throw new SQLException(ex.toString(), "08S01", ex);
     }
 
     if (!stmtHandle.isHasResultSet()) {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java b/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
index 2bcce7f..7fe3b2d 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
@@ -911,10 +911,10 @@ public class Driver implements CommandProcessor {
           driverRunHook.preDriverRun(hookContext);
       }
     } catch (Exception e) {
-      errorMessage = "FAILED: Hive Internal Error: " + Utilities.getNameMessage(e);
+      errorMessage = "FAILED: Hive Internal Error: " + Utilities.getNameMessage(e)
+          + "\n" + org.apache.hadoop.util.StringUtils.stringifyException(e);
       SQLState = ErrorMsg.findSQLState(e.getMessage());
-      console.printError(errorMessage + "\n"
-          + org.apache.hadoop.util.StringUtils.stringifyException(e));
+      console.printError(errorMessage);
       return new CommandProcessorResponse(12, errorMessage, SQLState);
     }
 
@@ -989,10 +989,10 @@ public class Driver implements CommandProcessor {
           driverRunHook.postDriverRun(hookContext);
       }
     } catch (Exception e) {
-      errorMessage = "FAILED: Hive Internal Error: " + Utilities.getNameMessage(e);
+      errorMessage = "FAILED: Hive Internal Error: " + Utilities.getNameMessage(e)
+          + "\n" + org.apache.hadoop.util.StringUtils.stringifyException(e);
       SQLState = ErrorMsg.findSQLState(e.getMessage());
-      console.printError(errorMessage + "\n"
-          + org.apache.hadoop.util.StringUtils.stringifyException(e));
+      console.printError(errorMessage);
       return new CommandProcessorResponse(12, errorMessage, SQLState);
     }
 
diff --git a/src/service/src/java/org/apache/hive/service/cli/operation/HiveCommandOperation.java b/src/service/src/java/org/apache/hive/service/cli/operation/HiveCommandOperation.java
index cf3b20d..e54ca78 100644
--- a/src/service/src/java/org/apache/hive/service/cli/operation/HiveCommandOperation.java
+++ b/src/service/src/java/org/apache/hive/service/cli/operation/HiveCommandOperation.java
@@ -79,6 +79,7 @@ public abstract class HiveCommandOperation extends ExecuteStatementOperation {
         sessionState.out = new PrintStream(System.out, true, "UTF-8");
         sessionState.err = new PrintStream(System.err, true, "UTF-8");
       } catch (UnsupportedEncodingException ee) {
+        LOG.error("Error creating PrintStream", e);
         ee.printStackTrace();
         sessionState.out = null;
         sessionState.err = null;
@@ -111,7 +112,7 @@ public abstract class HiveCommandOperation extends ExecuteStatementOperation {
       }
     } catch (Exception e) {
       setState(OperationState.ERROR);
-      throw new HiveSQLException("Error running query: " + e.toString());
+      throw new HiveSQLException("Error running query: " + e.toString(), e);
     }
     setState(OperationState.FINISHED);
   }
-- 
1.7.0.4

