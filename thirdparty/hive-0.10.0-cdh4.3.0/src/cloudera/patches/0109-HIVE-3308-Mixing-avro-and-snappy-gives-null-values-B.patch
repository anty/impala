From 63aa4e10986d052b1733aee916dd63cf022fe5ad Mon Sep 17 00:00:00 2001
From: Navis Ryu <navis@apache.org>
Date: Tue, 9 Apr 2013 00:43:45 +0000
Subject: [PATCH 109/121] HIVE-3308 Mixing avro and snappy gives null values (Bennie Schut via Navis)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1465849 13f79535-47bb-0310-9956-ffa450edef68
---
 .../clientpositive/avro_compression_enabled.q      |   43 +++++++++
 .../clientpositive/avro_compression_enabled.q.out  |   90 ++++++++++++++++++++
 .../apache/hadoop/hive/serde2/avro/AvroSerDe.java  |    2 -
 3 files changed, 133 insertions(+), 2 deletions(-)
 create mode 100644 ql/src/test/queries/clientpositive/avro_compression_enabled.q
 create mode 100644 ql/src/test/results/clientpositive/avro_compression_enabled.q.out

diff --git a/src/ql/src/test/queries/clientpositive/avro_compression_enabled.q b/src/ql/src/test/queries/clientpositive/avro_compression_enabled.q
new file mode 100644
index 0000000..8367206
--- /dev/null
+++ b/src/ql/src/test/queries/clientpositive/avro_compression_enabled.q
@@ -0,0 +1,43 @@
+-- verify that new joins bring in correct schemas (including evolved schemas)
+
+CREATE TABLE doctors4
+ROW FORMAT
+SERDE 'org.apache.hadoop.hive.serde2.avro.AvroSerDe'
+STORED AS
+INPUTFORMAT 'org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat'
+OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat'
+TBLPROPERTIES ('avro.schema.literal'='{
+  "namespace": "testing.hive.avro.serde",
+  "name": "doctors",
+  "type": "record",
+  "fields": [
+    {
+      "name":"number",
+      "type":"int",
+      "doc":"Order of playing the role"
+    },
+    {
+      "name":"first_name",
+      "type":"string",
+      "doc":"first name of actor playing role"
+    },
+    {
+      "name":"last_name",
+      "type":"string",
+      "doc":"last name of actor playing role"
+    },
+    {
+      "name":"extra_field",
+      "type":"string",
+      "doc:":"an extra field not in the original file",
+      "default":"fishfingers and custard"
+    }
+  ]
+}');
+
+LOAD DATA LOCAL INPATH '../data/files/doctors.avro' INTO TABLE doctors4;
+
+set hive.exec.compress.output=true;
+
+select count(*) from src;
+
diff --git a/src/ql/src/test/results/clientpositive/avro_compression_enabled.q.out b/src/ql/src/test/results/clientpositive/avro_compression_enabled.q.out
new file mode 100644
index 0000000..eefcfe7
--- /dev/null
+++ b/src/ql/src/test/results/clientpositive/avro_compression_enabled.q.out
@@ -0,0 +1,90 @@
+PREHOOK: query: -- verify that new joins bring in correct schemas (including evolved schemas)
+
+CREATE TABLE doctors4
+ROW FORMAT
+SERDE 'org.apache.hadoop.hive.serde2.avro.AvroSerDe'
+STORED AS
+INPUTFORMAT 'org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat'
+OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat'
+TBLPROPERTIES ('avro.schema.literal'='{
+  "namespace": "testing.hive.avro.serde",
+  "name": "doctors",
+  "type": "record",
+  "fields": [
+    {
+      "name":"number",
+      "type":"int",
+      "doc":"Order of playing the role"
+    },
+    {
+      "name":"first_name",
+      "type":"string",
+      "doc":"first name of actor playing role"
+    },
+    {
+      "name":"last_name",
+      "type":"string",
+      "doc":"last name of actor playing role"
+    },
+    {
+      "name":"extra_field",
+      "type":"string",
+      "doc:":"an extra field not in the original file",
+      "default":"fishfingers and custard"
+    }
+  ]
+}')
+PREHOOK: type: CREATETABLE
+POSTHOOK: query: -- verify that new joins bring in correct schemas (including evolved schemas)
+
+CREATE TABLE doctors4
+ROW FORMAT
+SERDE 'org.apache.hadoop.hive.serde2.avro.AvroSerDe'
+STORED AS
+INPUTFORMAT 'org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat'
+OUTPUTFORMAT 'org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat'
+TBLPROPERTIES ('avro.schema.literal'='{
+  "namespace": "testing.hive.avro.serde",
+  "name": "doctors",
+  "type": "record",
+  "fields": [
+    {
+      "name":"number",
+      "type":"int",
+      "doc":"Order of playing the role"
+    },
+    {
+      "name":"first_name",
+      "type":"string",
+      "doc":"first name of actor playing role"
+    },
+    {
+      "name":"last_name",
+      "type":"string",
+      "doc":"last name of actor playing role"
+    },
+    {
+      "name":"extra_field",
+      "type":"string",
+      "doc:":"an extra field not in the original file",
+      "default":"fishfingers and custard"
+    }
+  ]
+}')
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: default@doctors4
+PREHOOK: query: LOAD DATA LOCAL INPATH '../data/files/doctors.avro' INTO TABLE doctors4
+PREHOOK: type: LOAD
+PREHOOK: Output: default@doctors4
+POSTHOOK: query: LOAD DATA LOCAL INPATH '../data/files/doctors.avro' INTO TABLE doctors4
+POSTHOOK: type: LOAD
+POSTHOOK: Output: default@doctors4
+PREHOOK: query: select count(*) from src
+PREHOOK: type: QUERY
+PREHOOK: Input: default@src
+#### A masked pattern was here ####
+POSTHOOK: query: select count(*) from src
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@src
+#### A masked pattern was here ####
+500
diff --git a/src/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerDe.java b/src/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerDe.java
index fd409bf..bd81c3a 100644
--- a/src/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerDe.java
+++ b/src/serde/src/java/org/apache/hadoop/hive/serde2/avro/AvroSerDe.java
@@ -60,8 +60,6 @@ public class AvroSerDe implements SerDe {
     if(configuration == null) {
       LOG.info("Configuration null, not inserting schema");
     } else {
-      // force output files to have a .avro extension
-      configuration.set("hive.output.file.extension", ".avro");
       configuration.set(AvroSerdeUtils.AVRO_SERDE_SCHEMA, schema.toString(false));
     }
 
-- 
1.7.0.4

