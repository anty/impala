From ef65a0837e17d19b2ffb224fa7f1a2e805273194 Mon Sep 17 00:00:00 2001
From: Harsh J <harsh@cloudera.com>
Date: Tue, 22 Jan 2013 22:54:43 +0530
Subject: [PATCH 034/121] CDH-9161. Pluggable authentication handler for HiveServer2.

Description: Provide config to allow users to hook in their own
authentication handlers for HiveServer2.
Reason: Customer Request
Author: Harsh J
Ref: CDH-8938
---
 .../java/org/apache/hadoop/hive/conf/HiveConf.java |    1 +
 conf/hive-default.xml.template                     |   16 +++++++
 .../auth/AuthenticationProviderFactory.java        |    3 +
 .../auth/CustomAuthenticationProviderImpl.java     |   48 ++++++++++++++++++++
 .../apache/hive/service/auth/HiveAuthFactory.java  |    5 ++-
 .../service/auth/PasswdAuthenticationProvider.java |   14 +++++-
 6 files changed, 85 insertions(+), 2 deletions(-)
 create mode 100644 service/src/java/org/apache/hive/service/auth/CustomAuthenticationProviderImpl.java

diff --git a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index 5ad31d6..f8f7d24 100644
--- a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -677,6 +677,7 @@ public class HiveConf extends Configuration {
     HIVE_SERVER2_KERBEROS_PRINCIPAL("hive.server2.authentication.kerberos.principal", ""),
     HIVE_SERVER2_PLAIN_LDAP_URL("hive.server2.authentication.ldap.url", null),
     HIVE_SERVER2_PLAIN_LDAP_BASEDN("hive.server2.authentication.ldap.baseDN", null),
+    HIVE_SERVER2_CUSTOM_AUTHENTICATION_CLASS("hive.server2.custom.authentication.class", null),
 
     HIVE_CONF_RESTRICTED_LIST("hive.conf.restricted.list", null),
       
diff --git a/src/conf/hive-default.xml.template b/src/conf/hive-default.xml.template
index aaf09b9..2738633 100644
--- a/src/conf/hive-default.xml.template
+++ b/src/conf/hive-default.xml.template
@@ -1642,6 +1642,22 @@
        NONE: no authentication check
        LDAP: LDAP/AD based authentication
        KERBEROS: Kerberos/GSSAPI authentication
+       CUSTOM: Custom authentication provider
+               (Use with property hive.server2.custom.authentication.class)
+  </description>
+</property>
+
+<property>
+  <name>hive.server2.custom.authentication.class</name>
+  <value></value>
+  <description>
+    Custom authentication class. Used when property
+    'hive.server2.authentication' is set to 'CUSTOM'. Provided class
+    must be a proper implementation of the interface
+    org.apache.hive.service.auth.PasswdAuthenticationProvider. HiveServer2
+    will call its Authenticate(user, passed) method to authenticate requests.
+    The implementation may optionally extend the Hadoop's
+    org.apache.hadoop.conf.Configured class to grab Hive's Configuration object.
   </description>
 </property>
 
diff --git a/src/service/src/java/org/apache/hive/service/auth/AuthenticationProviderFactory.java b/src/service/src/java/org/apache/hive/service/auth/AuthenticationProviderFactory.java
index 4343da0..b92fd83 100644
--- a/src/service/src/java/org/apache/hive/service/auth/AuthenticationProviderFactory.java
+++ b/src/service/src/java/org/apache/hive/service/auth/AuthenticationProviderFactory.java
@@ -23,6 +23,7 @@ public class AuthenticationProviderFactory {
 
   public static enum AuthMethods {
     LDAP("LDAP"),
+    CUSTOM("CUSTOM"),
     NONE("NONE");
 
     String authMethod;
@@ -52,6 +53,8 @@ public class AuthenticationProviderFactory {
             throws AuthenticationException {
     if (authMethod.equals(AuthMethods.LDAP)) {
       return new LdapAuthenticationProviderImpl();
+    } else if (authMethod.equals(AuthMethods.CUSTOM)) {
+      return new CustomAuthenticationProviderImpl();
     } else if (authMethod.equals(AuthMethods.NONE)) {
       return new AnonymousAuthenticationProviderImpl();
     } else {
diff --git a/src/service/src/java/org/apache/hive/service/auth/CustomAuthenticationProviderImpl.java b/src/service/src/java/org/apache/hive/service/auth/CustomAuthenticationProviderImpl.java
new file mode 100644
index 0000000..d0cbcbb
--- /dev/null
+++ b/src/service/src/java/org/apache/hive/service/auth/CustomAuthenticationProviderImpl.java
@@ -0,0 +1,48 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hive.service.auth;
+
+import javax.security.sasl.AuthenticationException;
+
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.util.ReflectionUtils;
+
+public class CustomAuthenticationProviderImpl
+  implements PasswdAuthenticationProvider {
+
+  Class<? extends PasswdAuthenticationProvider> customHandlerClass;
+  PasswdAuthenticationProvider customProvider;
+
+  @SuppressWarnings("unchecked")
+  CustomAuthenticationProviderImpl () {
+    HiveConf conf = new HiveConf();
+    this.customHandlerClass = (Class<? extends PasswdAuthenticationProvider>)
+        conf.getClass(
+            HiveConf.ConfVars.HIVE_SERVER2_CUSTOM_AUTHENTICATION_CLASS.name(),
+            PasswdAuthenticationProvider.class);
+    this.customProvider =
+        ReflectionUtils.newInstance(this.customHandlerClass, conf);
+  }
+
+  @Override
+  public void Authenticate(String user, String  password)
+      throws AuthenticationException {
+    this.customProvider.Authenticate(user, password);
+  }
+
+}
diff --git a/src/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java b/src/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
index 7172fc4..a714c00 100644
--- a/src/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
+++ b/src/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
@@ -34,7 +34,8 @@ public class HiveAuthFactory {
     NOSASL("NOSASL"),
     NONE("NONE"),
     LDAP("LDAP"),
-    KERBEROS("KERBEROS");
+    KERBEROS("KERBEROS"),
+    CUSTOM("CUSTOM");
 
     private String authType; // Auth type for SASL
 
@@ -84,6 +85,8 @@ public class HiveAuthFactory {
       transportFactory = PlainSaslHelper.getPlainTransportFactory(authTypeStr);
     } else if (authTypeStr.equalsIgnoreCase(AuthTypes.NOSASL.getAuthName())) {
       transportFactory = new TTransportFactory();
+    } else if (authTypeStr.equalsIgnoreCase(AuthTypes.CUSTOM.getAuthName())) {
+      transportFactory = PlainSaslHelper.getPlainTransportFactory(authTypeStr);
     } else {
       throw new LoginException("Unsupported authentication type " + authTypeStr);
     }
diff --git a/src/service/src/java/org/apache/hive/service/auth/PasswdAuthenticationProvider.java b/src/service/src/java/org/apache/hive/service/auth/PasswdAuthenticationProvider.java
index 8daa98d..2d0da3a 100644
--- a/src/service/src/java/org/apache/hive/service/auth/PasswdAuthenticationProvider.java
+++ b/src/service/src/java/org/apache/hive/service/auth/PasswdAuthenticationProvider.java
@@ -20,6 +20,18 @@ package org.apache.hive.service.auth;
 import javax.security.sasl.AuthenticationException;
 
 public interface PasswdAuthenticationProvider {
-  // authenticate
+  /**
+   * The Authenticate method is called by the HiveServer2 authentication layer
+   * to authenticate users for their requests.
+   * If a user is to be granted, return nothing/throw nothing.
+   * When a user is to be disallowed, throw an appropriate {@link AuthenticationException}.
+   *
+   * For an example implementation, see {@link LdapAuthenticationProviderImpl}.
+   *
+   * @param user - The username received over the connection request
+   * @param password - The password received over the connection request
+   * @throws AuthenticationException - When a user is found to be
+   * invalid by the implementation
+   */
   void Authenticate(String user, String password) throws AuthenticationException;
 }
-- 
1.7.0.4

