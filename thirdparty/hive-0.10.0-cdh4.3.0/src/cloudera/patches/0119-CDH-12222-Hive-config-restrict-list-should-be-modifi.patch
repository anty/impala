From 72a3340b8f29b58ff417b5fad75d193b080c405c Mon Sep 17 00:00:00 2001
From: Prasad Mujumdar <prasadm@cloudera.com>
Date: Thu, 16 May 2013 13:26:09 -0700
Subject: [PATCH 119/121] CDH-12222: Hive config restrict list should be modifiable from HiveConf

---
 .../java/org/apache/hadoop/hive/conf/HiveConf.java |   39 +++++++--
 .../hive/ql/security/TestConfRestrictList.java     |   91 ++++++++++++++++++++
 2 files changed, 123 insertions(+), 7 deletions(-)
 create mode 100644 ql/src/test/org/apache/hadoop/hive/ql/security/TestConfRestrictList.java

diff --git a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index bc4130d..093b4e0 100644
--- a/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/src/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -1067,13 +1067,7 @@ public class HiveConf extends Configuration {
     }
 
     // setup list of conf vars that are not allowed to change runtime
-    String restrictListStr = this.get(ConfVars.HIVE_CONF_RESTRICTED_LIST.toString());
-    if (restrictListStr != null) {
-      for (String entry : restrictListStr.split(",")) {
-        restrictList.add(entry);
-      }
-    }
-    restrictList.add(ConfVars.HIVE_CONF_RESTRICTED_LIST.toString());
+    setupRestrictList();
   }
 
 
@@ -1188,4 +1182,35 @@ public class HiveConf extends Configuration {
     }
 
   }
+
+  /**
+   * Append comma separated list of config vars to the restrict List
+   * @param restrictListStr
+   */
+  public void addToRestrictList(String restrictListStr) {
+    if (restrictListStr == null) {
+      return;
+    }
+    String oldList = this.getVar(ConfVars.HIVE_CONF_RESTRICTED_LIST);
+    if (oldList == null || oldList.isEmpty()) {
+      this.setVar(ConfVars.HIVE_CONF_RESTRICTED_LIST, restrictListStr);
+    } else {
+      this.setVar(ConfVars.HIVE_CONF_RESTRICTED_LIST, oldList + "," + restrictListStr);
+    }
+    setupRestrictList();
+  }
+
+  /**
+   * Add the HIVE_CONF_RESTRICTED_LIST values to restrictList. Include HIVE_CONF_RESTRICTED_LIST itself
+   */
+  private void setupRestrictList() {
+    String restrictListStr = this.getVar(ConfVars.HIVE_CONF_RESTRICTED_LIST);
+    restrictList.clear();
+    if (restrictListStr != null) {
+      for (String entry : restrictListStr.split(",")) {
+        restrictList.add(entry.trim());
+      }
+    }
+    restrictList.add(ConfVars.HIVE_CONF_RESTRICTED_LIST.toString());
+  }
 }
diff --git a/src/ql/src/test/org/apache/hadoop/hive/ql/security/TestConfRestrictList.java b/src/ql/src/test/org/apache/hadoop/hive/ql/security/TestConfRestrictList.java
new file mode 100644
index 0000000..fb36b47
--- /dev/null
+++ b/src/ql/src/test/org/apache/hadoop/hive/ql/security/TestConfRestrictList.java
@@ -0,0 +1,91 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hive.ql.security;
+
+import junit.framework.TestCase;
+
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
+import org.junit.Test;
+
+public class TestConfRestrictList extends TestCase {
+  private HiveConf conf = null;
+
+  @Override
+  protected void setUp() throws Exception {
+    super.setUp();
+    System.setProperty(ConfVars.HIVE_CONF_RESTRICTED_LIST.varname,
+        ConfVars.HIVETESTMODEPREFIX.varname);
+    conf = new HiveConf();
+  }
+
+  /**
+   * Test that configs in restrict list can't be changed
+   * @throws Exception
+   */
+  @Test
+  public void testRestriction() throws Exception {
+    verifyRestriction(ConfVars.HIVETESTMODEPREFIX.varname, "foo");
+    conf.verifyAndSet(ConfVars.HIVETESTMODE.varname, "false");
+  }
+
+  /**
+   * Test that restrict list config itselft can't be changed
+   * @throws Exception
+   */
+  @Test
+  public void testRestrictList() throws Exception {
+    verifyRestriction(ConfVars.HIVE_CONF_RESTRICTED_LIST.varname, "foo");
+  }
+
+  /**
+   * Test appending new configs vars added to restrict list
+   * @throws Exception
+   */
+  @Test
+  public void testAppendRestriction() throws Exception {
+    String appendListStr = ConfVars.SCRATCHDIR.varname + "," +
+        ConfVars.LOCALSCRATCHDIR.varname + "," +
+        ConfVars.METASTOREURIS.varname;
+
+    conf.addToRestrictList(appendListStr);
+    // check if the new configs are added to HIVE_CONF_RESTRICTED_LIST
+    String newRestrictList = conf.getVar(ConfVars.HIVE_CONF_RESTRICTED_LIST);
+    assertTrue(newRestrictList.contains(ConfVars.SCRATCHDIR.varname));
+    assertTrue(newRestrictList.contains(ConfVars.LOCALSCRATCHDIR.varname));
+    assertTrue(newRestrictList.contains(ConfVars.METASTOREURIS.varname));
+
+    // check if the old values are still there in HIVE_CONF_RESTRICTED_LIST
+    assertTrue(newRestrictList.contains(ConfVars.HIVETESTMODEPREFIX.varname));
+
+    // verify that the new configs are in effect
+    verifyRestriction(ConfVars.HIVETESTMODEPREFIX.varname, "foo");
+    verifyRestriction(ConfVars.HIVE_CONF_RESTRICTED_LIST.varname, "foo");
+    verifyRestriction(ConfVars.LOCALSCRATCHDIR.varname, "foo");
+    verifyRestriction(ConfVars.METASTOREURIS.varname, "foo");
+  }
+
+  private void verifyRestriction(String varName, String newVal) {
+    try {
+      conf.verifyAndSet(varName, newVal);
+      fail("Setting config property " + varName + " should fail");
+    } catch (IllegalArgumentException e) {
+      // the verifyAndSet in this case is expected to fail with the IllegalArgumentException
+    }
+  }
+}
-- 
1.7.0.4

