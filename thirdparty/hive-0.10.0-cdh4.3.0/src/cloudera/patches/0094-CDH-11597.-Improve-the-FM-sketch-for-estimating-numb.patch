From 87cce3299be3bd445e6641f7ef04510a00c29a66 Mon Sep 17 00:00:00 2001
From: Shreepadma Venugopalan <shreepadma@cloudera.com>
Date: Fri, 12 Apr 2013 14:29:45 -0700
Subject: [PATCH 094/121] CDH-11597. Improve the FM sketch for estimating number of distinct values

---
 .../ql/udf/generic/NumDistinctValueEstimator.java  |   59 +++++++++++--------
 .../clientpositive/compute_stats_double.q.out      |    2 +-
 .../clientpositive/compute_stats_long.q.out        |    2 +-
 .../clientpositive/compute_stats_string.q.out      |    2 +-
 4 files changed, 37 insertions(+), 28 deletions(-)

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/NumDistinctValueEstimator.java b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/NumDistinctValueEstimator.java
index 69e6f46..557491a 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/NumDistinctValueEstimator.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/udf/generic/NumDistinctValueEstimator.java
@@ -28,7 +28,13 @@ public class NumDistinctValueEstimator {
 
   static final Log LOG = LogFactory.getLog(NumDistinctValueEstimator.class.getName());
 
-  private final int bitVectorSize = 32;
+  /* We want a,b,x to come from a finite field of size k.
+   * 2^p - 1 is prime for p = 31. Hence bitvectorSize has to be 31. Pick k = 2^p -1, p = 31.
+   * If a,b,x don't come from a finite field, (ax1 + b) mod k and (ax2 + b) mod k will not be pair wise
+   * independent. As a consequence, hash values will not distribute uniformly from 0 to 2^p-1
+   * thus introducing errors in the estimates.
+   */
+  private static final int bitVectorSize = 31;
   private int numBitVectors;
 
   // Refer to Flajolet-Martin'86 for the value of phi
@@ -53,11 +59,27 @@ public class NumDistinctValueEstimator {
     a = new int[numBitVectors];
     b = new int[numBitVectors];
 
-    aValue = new Random(79798);
-    bValue = new Random(34115);
+    /* Use a large prime number as a seed to the random number generator.
+     * Java's random number generator uses the Linear Congruential Generator to generate random
+     * numbers using the following recurrence relation,
+     *
+     * X(n+1) = (a X(n) + c ) mod m
+     *
+     *  where X0 is the seed passed by the user. Java's implementation uses m = 2^48. This is problematic because 2^48
+     *  is not a prime number and hence the set of numbers from 0 to m don't belong to a finite field.
+     *  If these numbers don't come from a finite field, any given X(i) and X(j) will not be pair
+     *  wise independent. Ideally the implementation should pick m such that m is prime.
+     *
+     *  However, empirically passing in prime numbers as seeds seems to work better than passing
+     *  composite numbers as seeds.
+     *
+     */
+    aValue = new Random(99397);
+    bValue = new Random(9876413);
 
     for (int i = 0; i < numBitVectors; i++) {
       int randVal;
+      
       /* a and b shouldn't be even; If a and b are even, then none of the values
        * will set bit 0 thus introducing errors in the estimate. Both a and b can be even
        * 25% of the times and as a result 25% of the bit vectors could be inaccurate. To avoid this
@@ -76,11 +98,11 @@ public class NumDistinctValueEstimator {
       b[i] = randVal;
 
       if (a[i] < 0) {
-        a[i] = a[i] + (1 << (bitVectorSize -1));
+        a[i] = a[i] + (1 << bitVectorSize - 1);
       }
 
       if (b[i] < 0) {
-        b[i] = b[i] + (1 << (bitVectorSize -1));
+        b[i] = b[i] + (1 << bitVectorSize - 1);
       }
     }
   }
@@ -197,8 +219,8 @@ public class NumDistinctValueEstimator {
   }
 
   private int generateHash(long v, int hashNum) {
-    int mod = 1 << (bitVectorSize - 1) - 1;
-    long tempHash = a[hashNum] * v + b[hashNum];
+    int mod = (1<<bitVectorSize) - 1;
+    long tempHash = a[hashNum] * v  + b[hashNum];
     tempHash %= mod;
     int hash = (int) tempHash;
 
@@ -206,7 +228,7 @@ public class NumDistinctValueEstimator {
      * Hence hash value has to be non-negative.
      */
     if (hash < 0) {
-      hash = hash + mod + 1;
+      hash = hash + mod;
     }
     return hash;
   }
@@ -266,6 +288,7 @@ public class NumDistinctValueEstimator {
     bitVector[hash%numBitVectors].set(index);
   }
 
+
   public void mergeEstimators(NumDistinctValueEstimator o) {
     // Bitwise OR the bitvector with the bitvector in the agg buffer
     for (int i=0; i<numBitVectors; i++) {
@@ -289,36 +312,22 @@ public class NumDistinctValueEstimator {
     return ((long)numDistinctValues);
   }
 
-  /* We use two estimators - one due to Flajolet-Martin and a modification due to
-   * Alon-Matias-Szegedy. FM uses the location of the least significant zero as an estimate of
-   * log2(phi*ndvs).
-   * AMS uses the location of the most significant one as an estimate of the log2(ndvs).
-   * We average the two estimators with suitable modifications to obtain an estimate of ndvs.
+  /* We use the Flajolet-Martin estimator to estimate the number of distinct values.FM uses the
+   * location of the least significant zero as an estimate of log2(phi*ndvs).
    */
   public long estimateNumDistinctValues() {
     int sumLeastSigZero = 0;
-    int sumMostSigOne = 0;
     double avgLeastSigZero;
-    double avgMostSigOne;
     double numDistinctValues;
 
     for (int i=0; i< numBitVectors; i++) {
       int leastSigZero = bitVector[i].nextClearBit(0);
       sumLeastSigZero += leastSigZero;
-      int mostSigOne = bitVectorSize;
-
-      for (int j=0; j< bitVectorSize; j++) {
-        if (bitVector[i].get(j)) {
-          mostSigOne = j;
-        }
-      }
-      sumMostSigOne += mostSigOne;
     }
 
     avgLeastSigZero =
         (double)(sumLeastSigZero/(numBitVectors * 1.0)) - (Math.log(phi)/Math.log(2.0));
-    avgMostSigOne = (double)(sumMostSigOne/(numBitVectors * 1.0));
-    numDistinctValues = Math.pow(2.0, (avgMostSigOne + avgLeastSigZero)/2.0);
+    numDistinctValues = Math.pow(2.0, avgLeastSigZero);
     return ((long)(numDistinctValues));
   }
 }
diff --git a/src/ql/src/test/results/clientpositive/compute_stats_double.q.out b/src/ql/src/test/results/clientpositive/compute_stats_double.q.out
index 16bea10..3456d58 100644
--- a/src/ql/src/test/results/clientpositive/compute_stats_double.q.out
+++ b/src/ql/src/test/results/clientpositive/compute_stats_double.q.out
@@ -30,4 +30,4 @@ select compute_stats(a, 16) from tab_double
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@tab_double
 #### A masked pattern was here ####
-{"columntype":"Double","min":-87.2,"max":435.33,"countnulls":2,"numdistinctvalues":8}
+{"columntype":"Double","min":-87.2,"max":435.33,"countnulls":2,"numdistinctvalues":11}
diff --git a/src/ql/src/test/results/clientpositive/compute_stats_long.q.out b/src/ql/src/test/results/clientpositive/compute_stats_long.q.out
index 8faf605..bb1aa6d 100644
--- a/src/ql/src/test/results/clientpositive/compute_stats_long.q.out
+++ b/src/ql/src/test/results/clientpositive/compute_stats_long.q.out
@@ -30,4 +30,4 @@ select compute_stats(a, 16) from tab_int
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@tab_int
 #### A masked pattern was here ####
-{"columntype":"Long","min":0,"max":344,"countnulls":1,"numdistinctvalues":16}
+{"columntype":"Long","min":0,"max":344,"countnulls":1,"numdistinctvalues":11}
diff --git a/src/ql/src/test/results/clientpositive/compute_stats_string.q.out b/src/ql/src/test/results/clientpositive/compute_stats_string.q.out
index 0e3b591..814024a 100644
--- a/src/ql/src/test/results/clientpositive/compute_stats_string.q.out
+++ b/src/ql/src/test/results/clientpositive/compute_stats_string.q.out
@@ -30,4 +30,4 @@ select compute_stats(a, 16) from tab_string
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@tab_string
 #### A masked pattern was here ####
-{"columntype":"String","maxlength":11,"avglength":3.9,"countnulls":0,"numdistinctvalues":5}
+{"columntype":"String","maxlength":11,"avglength":3.9,"countnulls":0,"numdistinctvalues":7}
-- 
1.7.0.4

