From d5b041589df0ddc47e84641d759235b746cf3334 Mon Sep 17 00:00:00 2001
From: Shreepadma Venugopalan <shreepadma@cloudera.com>
Date: Fri, 25 Jan 2013 16:03:35 -0800
Subject: [PATCH 040/121] CDH-9969. HiveServer2 doesn't return remote username for non-kerberos SASL connection

---
 ql/src/java/org/apache/hadoop/hive/ql/Driver.java  |    6 ++-
 .../apache/hadoop/hive/ql/hooks/HookContext.java   |   10 +++++-
 .../org/apache/hive/service/cli/CLIService.java    |   34 ++++++++++----------
 .../hive/service/cli/operation/SQLOperation.java   |    3 +-
 .../hive/service/cli/session/HiveSession.java      |    3 ++
 .../hive/service/cli/session/SessionManager.java   |   25 +++++++++++++-
 .../service/cli/thrift/TSetIpAddressProcessor.java |    9 +++++
 7 files changed, 66 insertions(+), 24 deletions(-)

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java b/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
index cc75c7b..89e3c8c 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
@@ -134,6 +134,7 @@ public class Driver implements CommandProcessor {
   // This value is set only if the operation is launched through HiveServer2 and the underlying
   // transport is derived from TSocket
   private String ipAddress;
+  private String userName;  // username for the currently executing statement
 
   private boolean checkLockManager() {
     boolean supportConcurrency = conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY);
@@ -324,9 +325,10 @@ public class Driver implements CommandProcessor {
     this.conf = conf;
   }
 
-  public Driver(HiveConf conf, String ipAddress) {
+  public Driver(HiveConf conf, String ipAddress, String userName) {
     this.conf = conf;
     this.ipAddress = ipAddress;
+    this.userName = userName;
   }
 
   public Driver() {
@@ -1073,7 +1075,7 @@ public class Driver implements CommandProcessor {
       }
       resStream = null;
 
-      HookContext hookContext = new HookContext(plan, conf, ctx.getPathToCS(), ipAddress);
+      HookContext hookContext = new HookContext(plan, conf, ctx.getPathToCS(), userName, ipAddress);
       hookContext.setHookType(HookContext.HookType.PRE_EXEC_HOOK);
 
       for (Hook peh : getHooks(HiveConf.ConfVars.PREEXECHOOKS)) {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java b/src/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java
index 56e317a..0b5b0d1 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java
@@ -52,14 +52,15 @@ public class HookContext {
   private HookType hookType;
   final private Map<String, ContentSummary> inputPathToContentSummary;
   private final String ipAddress;
+  private final String userName;
 
   public HookContext(QueryPlan queryPlan, HiveConf conf) throws Exception{
-    this(queryPlan, conf, new ConcurrentHashMap<String, ContentSummary>(), null);
+    this(queryPlan, conf, new ConcurrentHashMap<String, ContentSummary>(), null, null);
   }
 
   public HookContext(QueryPlan queryPlan, HiveConf conf,
       Map<String, ContentSummary> inputPathToContentSummary,
-      String ipAddress) throws Exception {
+      String userName,String ipAddress) throws Exception {
     this.queryPlan = queryPlan;
     this.conf = conf;
     this.inputPathToContentSummary = inputPathToContentSummary;
@@ -72,6 +73,7 @@ public class HookContext {
       linfo = SessionState.get().getLineageState().getLineageInfo();
     }
     this.ipAddress = ipAddress;
+    this.userName = userName;
   }
 
   public QueryPlan getQueryPlan() {
@@ -150,4 +152,8 @@ public class HookContext {
     return this.ipAddress;
   }
 
+  public String getUserName() {
+    return userName;
+  }
+
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/CLIService.java b/src/service/src/java/org/apache/hive/service/cli/CLIService.java
index c5a2a65..f4daef9 100644
--- a/src/service/src/java/org/apache/hive/service/cli/CLIService.java
+++ b/src/service/src/java/org/apache/hive/service/cli/CLIService.java
@@ -88,7 +88,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     SessionHandle sessionHandle = sessionManager.openSession(username, password, configuration);
     LOG.info(sessionHandle + ": openSession()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return sessionHandle;
   }
 
@@ -100,7 +100,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     sessionManager.closeSession(sessionHandle);
     LOG.info(sessionHandle + ": closeSession()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
   }
 
   /* (non-Javadoc)
@@ -111,7 +111,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     GetInfoValue infoValue = sessionManager.getSession(sessionHandle).getInfo(getInfoType);
     LOG.info(sessionHandle + ": getInfo()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return infoValue;
   }
 
@@ -124,7 +124,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle)
         .executeStatement(statement, confOverlay);
     LOG.info(sessionHandle + ": executeStatement()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return opHandle;
   }
 
@@ -136,7 +136,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle).getTypeInfo();
     LOG.info(sessionHandle + ": getTypeInfo()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return opHandle;
   }
 
@@ -148,7 +148,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle).getCatalogs();
     LOG.info(sessionHandle + ": getCatalogs()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return opHandle;
   }
 
@@ -162,7 +162,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle)
         .getSchemas(catalogName, schemaName);
     LOG.info(sessionHandle + ": getSchemas()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return opHandle;
   }
 
@@ -176,7 +176,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager
         .getSession(sessionHandle).getTables(catalogName, schemaName, tableName, tableTypes);
     LOG.info(sessionHandle + ": getTables()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return opHandle;
   }
 
@@ -188,7 +188,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle).getTableTypes();
     LOG.info(sessionHandle + ": getTableTypes()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return opHandle;
   }
 
@@ -202,7 +202,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle)
         .getColumns(catalogName, schemaName, tableName, columnName);
     LOG.info(sessionHandle + ": getColumns()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return opHandle;
   }
 
@@ -216,7 +216,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle)
         .getFunctions(catalogName, schemaName, functionName);
     LOG.info(sessionHandle + ": getFunctions()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return opHandle;
   }
 
@@ -228,7 +228,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     OperationState opState = sessionManager.getOperationManager().getOperationState(opHandle);
     LOG.info(opHandle + ": getOperationStatus()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return opState;
   }
 
@@ -240,7 +240,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     sessionManager.getOperationManager().cancelOperation(opHandle);
     LOG.info(opHandle + ": cancelOperation()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     }
 
   /* (non-Javadoc)
@@ -251,7 +251,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     sessionManager.getOperationManager().closeOperation(opHandle);
     LOG.info(opHandle + ": closeOperation");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
   }
 
   /* (non-Javadoc)
@@ -263,7 +263,7 @@ public class CLIService extends CompositeService implements ICLIService {
     TableSchema tableSchema = sessionManager.getOperationManager()
         .getOperationResultSetSchema(opHandle);
     LOG.info(opHandle + ": getResultSetMetadata()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return tableSchema;
   }
 
@@ -276,7 +276,7 @@ public class CLIService extends CompositeService implements ICLIService {
     RowSet rowSet = sessionManager.getOperationManager()
         .getOperationNextRowSet(opHandle, orientation, maxRows);
     LOG.info(opHandle + ": fetchResults()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return rowSet;
   }
 
@@ -288,7 +288,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     RowSet rowSet = sessionManager.getOperationManager().getOperationNextRowSet(opHandle);
     LOG.info(opHandle + ": fetchResults()");
-    sessionManager.clearIpAddress();
+    sessionManager.clearThreadLocals();
     return rowSet;
   }
 
diff --git a/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java b/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
index 1445a67..f3a48a2 100644
--- a/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
+++ b/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
@@ -83,7 +83,8 @@ public class SQLOperation extends ExecuteStatementOperation {
     String SQLState = null;
 
     try {
-      driver = new Driver(getParentSession().getHiveConf(), getParentSession().getIpAddress());
+      driver = new Driver(getParentSession().getHiveConf(), getParentSession().getIpAddress(),
+                            getParentSession().getUsername());
       // In Hive server mode, we are not able to retry in the FetchTask
       // case, when calling fetch queries since execute() has returned.
       // For now, we disable the test attempts.
diff --git a/src/service/src/java/org/apache/hive/service/cli/session/HiveSession.java b/src/service/src/java/org/apache/hive/service/cli/session/HiveSession.java
index c8c2679..7629b23 100644
--- a/src/service/src/java/org/apache/hive/service/cli/session/HiveSession.java
+++ b/src/service/src/java/org/apache/hive/service/cli/session/HiveSession.java
@@ -272,4 +272,7 @@ public class HiveSession {
     return this.ipAddress = ipAddress;
   }
 
+  public String getUserName() {
+    return username;
+  }
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java b/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
index aa93152..3741dd2 100644
--- a/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
+++ b/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
@@ -65,7 +65,9 @@ public class SessionManager extends CompositeService {
   }
 
   public SessionHandle openSession(String username, String password, Map<String, String> sessionConf) {
-    HiveSession session = new HiveSession(username, password, sessionConf, threadLocalIpAddress.get());
+    HiveSession session = new HiveSession(threadLocalUserName.get(), password, sessionConf,
+                                threadLocalIpAddress.get());
+
     session.setSessionManager(this);
     session.setOperationManager(operationManager);
     synchronized(sessionMapLock) {
@@ -112,8 +114,27 @@ public class SessionManager extends CompositeService {
     threadLocalIpAddress.set(ipAddress);
   }
 
-  public void clearIpAddress() {
+  private void clearIpAddress() {
     threadLocalIpAddress.remove();
   }
 
+  private static ThreadLocal<String> threadLocalUserName = new ThreadLocal<String>(){
+    @Override
+    protected synchronized String initialValue() {
+      return null;
+    }
+  };
+
+  public static void setUserName(String userName) {
+    threadLocalUserName.set(userName);
+  }
+
+  private void clearUserName() {
+    threadLocalUserName.remove();
+  }
+
+  public void clearThreadLocals() {
+    clearIpAddress();
+    clearUserName();
+  }
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/thrift/TSetIpAddressProcessor.java b/src/service/src/java/org/apache/hive/service/cli/thrift/TSetIpAddressProcessor.java
index e4739bd..2276612 100644
--- a/src/service/src/java/org/apache/hive/service/cli/thrift/TSetIpAddressProcessor.java
+++ b/src/service/src/java/org/apache/hive/service/cli/thrift/TSetIpAddressProcessor.java
@@ -34,9 +34,18 @@ public class TSetIpAddressProcessor<I extends Iface> extends TCLIService.Process
   @Override
   public boolean process(final TProtocol in, final TProtocol out) throws TException {
     setIpAddress(in);
+    setUserName(in);
     return super.process(in, out);
   }
 
+  private void setUserName(final TProtocol in) {
+    TTransport transport = in.getTransport();
+    if (transport instanceof TSaslServerTransport) {
+      String userName = ((TSaslServerTransport)transport).getSaslServer().getAuthorizationID();
+      SessionManager.setUserName(userName);
+    }
+  }
+
   protected void setIpAddress(final TProtocol in) {
     TTransport transport = in.getTransport();
     TSocket tSocket = getUnderlyingSocketFromTransport(transport);
-- 
1.7.0.4

