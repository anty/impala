From 44ae2b004d74f7c092975bc9d805251a9df4ed35 Mon Sep 17 00:00:00 2001
From: Prasad Mujumdar <prasadm@cloudera.com>
Date: Fri, 25 Jan 2013 12:06:46 -0800
Subject: [PATCH 039/121] CDH-9971:HiveServer2 JDBC need to support decimal

---
 eclipse-templates/.classpath                       |   61 ++++++++-----------
 jdbc/build.xml                                     |    3 +
 jdbc/ivy.xml                                       |   51 ++++++++++++++++
 .../org/apache/hive/jdbc/HiveBaseResultSet.java    |   27 +++++++-
 .../java/org/apache/hive/jdbc/HiveConnection.java  |    5 +-
 .../apache/hive/jdbc/HiveResultSetMetaData.java    |    2 +
 .../java/org/apache/hive/jdbc/HiveStatement.java   |   30 +++++-----
 jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java |    8 +++
 jdbc/src/java/org/apache/hive/jdbc/Utils.java      |    2 +
 .../test/org/apache/hive/jdbc/TestJdbcDriver2.java |   16 ++++-
 .../apache/hadoop/hive/metastore/api/Database.java |    4 +-
 .../hive/metastore/api/EnvironmentContext.java     |    4 +-
 .../apache/hadoop/hive/metastore/api/Index.java    |    4 +-
 .../hadoop/hive/metastore/api/Partition.java       |    4 +-
 .../hive/metastore/api/PrincipalPrivilegeSet.java  |   12 ++--
 .../apache/hadoop/hive/metastore/api/Schema.java   |    4 +-
 .../hadoop/hive/metastore/api/SerDeInfo.java       |    4 +-
 .../hadoop/hive/metastore/api/SkewedInfo.java      |    4 +-
 .../hive/metastore/api/StorageDescriptor.java      |    4 +-
 .../apache/hadoop/hive/metastore/api/Table.java    |    4 +-
 .../hive/metastore/api/ThriftHiveMetastore.java    |   16 +++---
 .../apache/hadoop/hive/ql/plan/api/Operator.java   |    8 +-
 .../org/apache/hadoop/hive/ql/plan/api/Query.java  |    8 +-
 .../org/apache/hadoop/hive/ql/plan/api/Stage.java  |    8 +-
 .../org/apache/hadoop/hive/ql/plan/api/Task.java   |    8 +-
 .../hadoop/hive/serde2/thrift/test/Complex.java    |    4 +-
 .../hadoop/hive/serde2/thrift/test/MegaStruct.java |   24 ++++----
 service/if/TCLIService.thrift                      |    9 ++-
 .../gen/thrift/gen-cpp/TCLIService_constants.cpp   |    2 +
 .../src/gen/thrift/gen-cpp/TCLIService_types.cpp   |    8 ++-
 service/src/gen/thrift/gen-cpp/TCLIService_types.h |    3 +-
 .../service/cli/thrift/TCLIServiceConstants.java   |    2 +
 .../service/cli/thrift/TExecuteStatementReq.java   |    4 +-
 .../hive/service/cli/thrift/TOpenSessionReq.java   |    4 +-
 .../hive/service/cli/thrift/TOpenSessionResp.java  |    4 +-
 .../hive/service/cli/thrift/TStructTypeEntry.java  |    4 +-
 .../apache/hive/service/cli/thrift/TTypeId.java    |    5 +-
 .../hive/service/cli/thrift/TUnionTypeEntry.java   |    4 +-
 .../src/gen/thrift/gen-py/TCLIService/constants.py |    2 +
 .../src/gen/thrift/gen-py/TCLIService/ttypes.py    |    3 +
 .../gen/thrift/gen-rb/t_c_l_i_service_constants.rb |    2 +
 .../src/gen/thrift/gen-rb/t_c_l_i_service_types.rb |    5 +-
 .../org/apache/hive/service/cli/ColumnValue.java   |   11 ++++
 .../src/java/org/apache/hive/service/cli/Type.java |    7 ++
 44 files changed, 266 insertions(+), 142 deletions(-)
 delete mode 100644 metastore/src/gen/thrift/gen-php/ThriftHiveMetastore.php
 delete mode 100644 metastore/src/gen/thrift/gen-php/hive_metastore_constants.php
 delete mode 100644 metastore/src/gen/thrift/gen-php/hive_metastore_types.php
 mode change 100644 => 100755 metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
 mode change 100644 => 100755 service/src/gen/thrift/gen-py/TCLIService/TCLIService-remote
 mode change 100644 => 100755 service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote

diff --git a/src/eclipse-templates/.classpath b/src/eclipse-templates/.classpath
index 69f1538..1d44dd9 100644
--- a/src/eclipse-templates/.classpath
+++ b/src/eclipse-templates/.classpath
@@ -18,37 +18,27 @@
 --> 
 <classpath>
   <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/ant-1.6.5.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/commons-cli-1.2.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/commons-codec-1.3.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/commons-el-1.0.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/commons-httpclient-3.0.1.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/commons-logging-1.1.1.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/commons-net-1.4.1.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/core-3.1.1.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/ftplet-api-1.0.0.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/ftpserver-core-1.0.0.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/ftpserver-deprecated-1.0.0-M2.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/hadoop-core-@HADOOPVER@.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/hadoop-test-@HADOOPVER@.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/hadoop-tools-@HADOOPVER@.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/hsqldb-1.8.0.10.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/jasper-compiler-5.5.12.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/jasper-runtime-5.5.12.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/jets3t-0.7.1.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/jetty-6.1.14.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/jetty-util-6.1.14.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/jsp-2.1-6.1.14.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/jsp-api-2.1-6.1.14.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/junit-4.5.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/kfs-0.3.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/mina-core-2.0.0-M5.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/oro-2.0.8.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/servlet-api-2.5-6.1.14.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.20.shim/xmlenc-0.52.jar"/>
-   <classpathentry kind="lib" path="build/ivy/lib/default/avro-mapred-@avro.version@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/default/hadoop-archives-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/default/hadoop-auth-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/default/hadoop-common-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/default/hadoop-mapreduce-client-core-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-annotations-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-archives-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-auth-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-common-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-hdfs-@HADOOPVER@-tests.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-hdfs-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-mapreduce-client-common-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-mapreduce-client-core-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-mapreduce-client-jobclient-@HADOOPVER@-tests.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-mapreduce-client-jobclient-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-mapreduce-client-shuffle-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-yarn-api-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-yarn-common-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-yarn-server-common-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/hadoop0.23.shim/hadoop-yarn-server-nodemanager-@HADOOPVER@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/default/avro-mapred-@avro.version@.jar"/>
   <classpathentry kind="lib" path="build/ivy/lib/default/jline-@jline.version@.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/default/sqlline-@sqlline.version@.jar"/>
   <classpathentry kind="lib" path="build/ivy/lib/default/json-@json.version@.jar"/>
   <classpathentry kind="lib" path="build/ivy/lib/default/asm-@asm.version@.jar"/>
   <classpathentry kind="lib" path="build/ivy/lib/default/commons-compress-@commons-compress.version@.jar"/>
@@ -79,10 +69,10 @@
   <classpathentry kind="lib" path="build/ivy/lib/default/slf4j-log4j12-@slf4j-log4j12.version@.jar"/>
   <classpathentry kind="lib" path="build/ivy/lib/default/JavaEWAH-@javaewah.version@.jar"/>
   <classpathentry kind="lib" path="build/ivy/lib/default/javolution-@javolution.version@.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/default/jackson-core-asl-1.8.8.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/default/jackson-jaxrs-1.8.8.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/default/jackson-mapper-asl-1.8.8.jar"/>
-  <classpathentry kind="lib" path="build/ivy/lib/default/jackson-xc-1.8.8.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/default/jackson-core-asl-@jackson.version@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/default/jackson-jaxrs-@jackson.version@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/default/jackson-mapper-asl-@jackson.version@.jar"/>
+  <classpathentry kind="lib" path="build/ivy/lib/default/jackson-xc-@jackson.version@.jar"/>
   <classpathentry kind="lib" path="build/ivy/lib/default/mockito-all-@mockito-all.version@.jar"/>
   <classpathentry kind="lib" path="build/ivy/lib/default/stringtemplate-@stringtemplate.version@.jar"/>
   <classpathentry kind="lib" path="build/builtins/hive-builtins-@HIVE_VERSION@.jar"/>
@@ -111,8 +101,9 @@
   <classpathentry kind="src" path="service/src/test"/>
   <classpathentry kind="src" path="jdbc/src/java"/>
   <classpathentry kind="src" path="jdbc/src/test"/>
-  <classpathentry kind="src" path="shims/src/@HADOOPVERPREF@/java"/>
+  <classpathentry kind="src" path="shims/src/0.23/java"/>
   <classpathentry kind="src" path="shims/src/common/java"/>
+  <classpathentry kind="src" path="shims/src/common-secure/java"/>
   <classpathentry kind="src" path="hwi/src/java"/>
   <classpathentry kind="src" path="hwi/src/test"/>
   <classpathentry kind="src" path="hbase-handler/src/java"/>
diff --git a/src/jdbc/build.xml b/src/jdbc/build.xml
index 45100a1..b75c38f 100644
--- a/src/jdbc/build.xml
+++ b/src/jdbc/build.xml
@@ -22,6 +22,7 @@
 
   <import file="../build-common.xml"/>
 
+<!--
   <target name="set-test-classpath">
     <typedef name="distinctelementsclasspath" classname="org.apache.hadoop.hive.ant.DistinctElementsClassPath"
       classpath="${build.dir.hive}/anttasks/hive-anttasks-${version}.jar:${build.ivy.lib.dir}/default/commons-collections-${commons-collections.version}.jar:${build.ivy.lib.dir}/default/commons-lang-${commons-lang.version}.jar"/>
@@ -33,10 +34,12 @@
       <fileset dir="${test.src.data.dir}" includes="files/*.jar"/>
       <fileset dir="${hive.root}" includes="testlibs/*.jar"/>
       <pathelement location="${build.dir.hive}/ql/test/classes"/>
+      <fileset dir="${build.ivy.lib.dir}/hadoop-${hadoop.mr.test.rev}.test" includes="*.jar" erroronmissingdir="false" />
       <fileset dir="${hive.root}/build/ivy/lib/hadoop0.${hadoop.mr.rev}.shim" includes="*.jar" />
       <path refid="classpath" />
     </distinctelementsclasspath>
   </target>
+-->
 
   <target name="compile" depends="init,ivy-retrieve">
     <echo message="Project: ${ant.project.name}"/>
diff --git a/src/jdbc/ivy.xml b/src/jdbc/ivy.xml
index 9269bd1..cb76d07 100644
--- a/src/jdbc/ivy.xml
+++ b/src/jdbc/ivy.xml
@@ -34,6 +34,57 @@
     <dependency org="commons-logging" name="commons-logging" rev="${commons-logging.version}"
                 transitive="false"/>
 
+    <!-- MR1 dependency -->
+    <dependency org="org.apache.hadoop" name="hadoop-core"
+                rev="${hadoop-0.20.version}"
+                conf="hadoop-mr1.test->default">
+      <include type="jar"/>
+      <exclude org="commons-daemon" module="commons-daemon"/><!--bad POM-->
+      <exclude org="org.apache.commons" module="commons-daemon"/><!--bad POM-->
+    </dependency>
+    <dependency org="org.apache.hadoop" name="hadoop-test"
+                rev="${hadoop-0.20.version}"
+                conf="hadoop-mr1.test->default">
+      <include type="jar"/>
+      <exclude org="commons-daemon" module="commons-daemon"/><!--bad POM-->
+      <exclude org="org.apache.commons" module="commons-daemon"/><!--bad POM-->
+    </dependency>
+    <dependency org="org.apache.hadoop" name="hadoop-tools"
+                rev="${hadoop-0.20.version}"
+                conf="hadoop-mr1.test->default">
+      <include type="jar"/>
+      <exclude org="commons-daemon" module="commons-daemon"/><!--bad POM-->
+      <exclude org="org.apache.commons" module="commons-daemon"/><!--bad POM-->
+    </dependency>
+    <dependency org="org.apache.hadoop" name="hadoop-minicluster"
+                rev="${hadoop-0.20.version}"
+                conf="hadoop-mr1.test->default">
+      <exclude org="commons-daemon" module="commons-daemon"/><!--bad POM-->
+      <exclude org="org.apache.commons" module="commons-daemon"/><!--bad POM-->
+    </dependency>
+
+    <!-- Hack to get jobclient tests dependency in. -->
+    <dependency org="org.apache.hadoop" name="hadoop-mapreduce-client-jobclient" rev="${hadoop-0.23.version}"
+                conf="hadoop23.test->default" transitive="false">
+      <artifact name="hadoop-mapreduce-client-jobclient" type="tests" ext="jar" />
+      <exclude org="commons-daemon" module="commons-daemon"/><!--bad POM-->
+      <exclude org="org.apache.commons" module="commons-daemon"/><!--bad POM-->
+    </dependency>
+    <dependency org="org.apache.hadoop" name="hadoop-mapreduce-client-app"
+                rev="${hadoop-0.23.version}"
+                conf="hadoop23.test->default">
+      <include type="jar"/>
+      <exclude org="commons-daemon" module="commons-daemon"/><!--bad POM-->
+      <exclude org="org.apache.commons" module="commons-daemon"/><!--bad POM-->
+    </dependency>
+    <dependency org="org.apache.hadoop" name="hadoop-mapreduce-client-hs"
+                rev="${hadoop-0.23.version}"
+                conf="hadoop23.test->default">
+      <include type="jar"/>
+      <exclude org="commons-daemon" module="commons-daemon"/><!--bad POM-->
+      <exclude org="org.apache.commons" module="commons-daemon"/><!--bad POM-->
+    </dependency>
+
     <!-- Test Dependencies -->
     <dependency org="junit" name="junit" rev="${junit.version}" conf="test->default" />
 
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java
index d84d30f..a65499b 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java
@@ -21,6 +21,7 @@ package org.apache.hive.jdbc;
 import java.io.InputStream;
 import java.io.Reader;
 import java.math.BigDecimal;
+import java.math.MathContext;
 import java.net.URL;
 import java.sql.Array;
 import java.sql.Blob;
@@ -116,19 +117,26 @@ public abstract class HiveBaseResultSet implements ResultSet {
   }
 
   public BigDecimal getBigDecimal(int columnIndex) throws SQLException {
-    throw new SQLException("Method not supported");
+    Object val = getObject(columnIndex);
+
+    if (val == null || val instanceof BigDecimal) {
+      return (BigDecimal)val;
+    }
+
+    throw new SQLException("Illegal conversion");
   }
 
   public BigDecimal getBigDecimal(String columnName) throws SQLException {
-    throw new SQLException("Method not supported");
+    return getBigDecimal(findColumn(columnName));
   }
 
   public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
-    throw new SQLException("Method not supported");
+    MathContext mc = new MathContext(scale);
+    return getBigDecimal(columnIndex).round(mc);
   }
 
   public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
-    throw new SQLException("Method not supported");
+    return getBigDecimal(findColumn(columnName), scale);
   }
 
   public InputStream getBinaryStream(int columnIndex) throws SQLException {
@@ -431,6 +439,15 @@ public abstract class HiveBaseResultSet implements ResultSet {
     return null;
   }
 
+  private BigDecimal getBigDecimalValue(TStringValue tStringValue) {
+    if (tStringValue.isSetValue()) {
+      wasNull = false;
+      return new BigDecimal(tStringValue.getValue());
+    }
+    wasNull = true;
+    return null;
+  }
+
   private Object getColumnValue(int columnIndex) throws SQLException {
     if (row == null) {
       throw new SQLException("No row found.");
@@ -465,6 +482,8 @@ public abstract class HiveBaseResultSet implements ResultSet {
       return getStringValue(tColumnValue.getStringVal());
     case TIMESTAMP_TYPE:
       return getTimestampValue(tColumnValue.getStringVal());
+    case DECIMAL_TYPE:
+      return getBigDecimalValue(tColumnValue.getStringVal());
     default:
       throw new SQLException("Unrecognized column type:" + columnType);
     }
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
index 929b295..17b4d39 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveConnection.java
@@ -107,10 +107,6 @@ public class HiveConnection implements java.sql.Connection {
 
   private void configureConnection(Utils.JdbcConnectionParams connParams)
       throws SQLException {
-    Statement stmt = createStatement();
-    stmt.execute("set hive.fetch.output.serde = org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe");
-    stmt.close();
-
     // set the hive variable in session state for local mode
     if (connParams.isEmbeddedMode()) {
       if (!connParams.getHiveVars().isEmpty()) {
@@ -118,6 +114,7 @@ public class HiveConnection implements java.sql.Connection {
       }
     } else {
       // for remote JDBC client, try to set the conf var using 'set foo=bar'
+      Statement stmt = createStatement();
       for (Entry<String, String> hiveConf : connParams.getHiveConfs().entrySet()) {
         stmt.execute("set " + hiveConf.getKey() + "=" + hiveConf.getValue());
         stmt.close();
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveResultSetMetaData.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveResultSetMetaData.java
index 967391b..1eb18b9 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveResultSetMetaData.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveResultSetMetaData.java
@@ -112,6 +112,8 @@ public class HiveResultSetMetaData implements java.sql.ResultSetMetaData {
       return serdeConstants.BIGINT_TYPE_NAME;
     } else if ("timestamp".equalsIgnoreCase(type)) {
       return serdeConstants.TIMESTAMP_TYPE_NAME;
+    } else if ("decimal".equalsIgnoreCase(type)) {
+      return serdeConstants.DECIMAL_TYPE_NAME;
     } else if (type.startsWith("map<")) {
       return serdeConstants.STRING_TYPE_NAME;
     } else if (type.startsWith("array<")) {
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java
index 0fd8f4a..9497214 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveStatement.java
@@ -25,12 +25,12 @@ import java.sql.SQLWarning;
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.hive.service.cli.thrift.TCLIService;
 import org.apache.hive.service.cli.thrift.TCloseOperationReq;
 import org.apache.hive.service.cli.thrift.TCloseOperationResp;
 import org.apache.hive.service.cli.thrift.TExecuteStatementReq;
 import org.apache.hive.service.cli.thrift.TExecuteStatementResp;
 import org.apache.hive.service.cli.thrift.TOperationHandle;
-import org.apache.hive.service.cli.thrift.TCLIService;
 import org.apache.hive.service.cli.thrift.TSessionHandle;
 
 /**
@@ -117,16 +117,7 @@ public class HiveStatement implements java.sql.Statement {
     warningChain = null;
   }
 
-  /*
-   * (non-Javadoc)
-   *
-   * @see java.sql.Statement#close()
-   */
-
-  public void close() throws SQLException {
-    if (isClosed) {
-      return;
-    }
+  private void closeClientOperation() throws SQLException {
     try {
       if (stmtHandle != null) {
         TCloseOperationReq closeReq = new TCloseOperationReq();
@@ -139,8 +130,20 @@ public class HiveStatement implements java.sql.Statement {
     } catch (Exception e) {
       throw new SQLException(e.toString(), "08S01");
     }
-    client = null;
     stmtHandle = null;
+  }
+  /*
+   * (non-Javadoc)
+   *
+   * @see java.sql.Statement#close()
+   */
+
+  public void close() throws SQLException {
+    if (isClosed) {
+      return;
+    }
+    closeClientOperation();
+    client = null;
     resultSet = null;
     isClosed = true;
   }
@@ -157,8 +160,7 @@ public class HiveStatement implements java.sql.Statement {
     }
 
     try {
-      resultSet = null;
-      stmtHandle = null;
+      closeClientOperation();
       TExecuteStatementReq execReq = new TExecuteStatementReq(sessHandle, sql);
       execReq.setConfOverlay(sessConf);
       TExecuteStatementResp execResp = client.ExecuteStatement(execReq);
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java b/src/jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java
index 1eb2b01..25c3f3f 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/JdbcColumn.java
@@ -84,6 +84,8 @@ public class JdbcColumn {
     // see http://download.oracle.com/javase/6/docs/api/constant-values.html#java.lang.Double.MAX_EXPONENT
     case Types.DOUBLE:
       return 25; // e.g. -(17#).e-####
+    case Types.DECIMAL:
+      return Integer.MAX_VALUE;
     default:
       throw new SQLException("Invalid column type: " + columnType);
     }
@@ -110,6 +112,8 @@ public class JdbcColumn {
       return 15;
     case Types.TIMESTAMP:
       return 29;
+    case Types.DECIMAL:
+      return Integer.MAX_VALUE;
     default:
       throw new SQLException("Invalid column type: " + columnType);
     }
@@ -131,6 +135,8 @@ public class JdbcColumn {
       return 15;
     case  Types.TIMESTAMP:
       return 9;
+    case Types.DECIMAL:
+      return Integer.MAX_VALUE;
     default:
       throw new SQLException("Invalid column type: " + columnType);
     }
@@ -159,6 +165,8 @@ public class JdbcColumn {
       return 2;
     } else if (type.equalsIgnoreCase("double")) {
       return 2;
+    } else if (type.equalsIgnoreCase("decimal")) {
+      return 10;
     } else { // anything else including boolean and string is null
       return null;
     }
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java b/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
index dd2f67f..433b2c5 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
@@ -130,6 +130,8 @@ public class Utils {
       return Types.BIGINT;
     } else if ("timestamp".equalsIgnoreCase(type)) {
       return Types.TIMESTAMP;
+    } else if ("decimal".equalsIgnoreCase(type)) {
+      return Types.DECIMAL;
     } else if (type.startsWith("map<")) {
       return Types.VARCHAR;
     } else if (type.startsWith("array<")) {
diff --git a/src/jdbc/src/test/org/apache/hive/jdbc/TestJdbcDriver2.java b/src/jdbc/src/test/org/apache/hive/jdbc/TestJdbcDriver2.java
index 0a243cd..2e26ce0 100644
--- a/src/jdbc/src/test/org/apache/hive/jdbc/TestJdbcDriver2.java
+++ b/src/jdbc/src/test/org/apache/hive/jdbc/TestJdbcDriver2.java
@@ -144,7 +144,8 @@ public class TestJdbcDriver2 extends TestCase {
         + " c14 map<int, map<int,int>>,"
         + " c15 struct<r:int,s:struct<a:int,b:string>>,"
         + " c16 array<struct<m:map<string,string>,n:int>>,"
-        + " c17 timestamp) comment '"+dataTypeTableComment
+        + " c17 timestamp, "
+        + " c18 decimal) comment'" + dataTypeTableComment
             +"' partitioned by (dt STRING)");
 
     stmt.execute("load data local inpath '"
@@ -428,6 +429,7 @@ public class TestJdbcDriver2 extends TestCase {
     assertEquals("[]", res.getString(16));
     assertEquals(null, res.getString(17));
     assertEquals(null, res.getTimestamp(17));
+    assertEquals(null, res.getBigDecimal(18));
 
     // row 3
     assertTrue(res.next());
@@ -449,6 +451,7 @@ public class TestJdbcDriver2 extends TestCase {
     assertEquals("[[{}, 1], [{c=d, a=b}, 2]]", res.getString(16));
     assertEquals("2012-04-22 09:00:00.123456789", res.getString(17));
     assertEquals("2012-04-22 09:00:00.123456789", res.getTimestamp(17).toString());
+    assertEquals("123456789.0123456", res.getBigDecimal(18).toString());
 
     // test getBoolean rules on non-boolean columns
     assertEquals(true, res.getBoolean(1));
@@ -840,13 +843,13 @@ public class TestJdbcDriver2 extends TestCase {
 
     ResultSet res = stmt.executeQuery(
         "select c1, c2, c3, c4, c5 as a, c6, c7, c8, c9, c10, c11, c12, " +
-        "c1*2, sentences(null, null, null) as b, c17 from " + dataTypeTableName + " limit 1");
+        "c1*2, sentences(null, null, null) as b, c17, c18 from " + dataTypeTableName + " limit 1");
     ResultSetMetaData meta = res.getMetaData();
 
     ResultSet colRS = con.getMetaData().getColumns(null, null,
         dataTypeTableName.toLowerCase(), null);
 
-    assertEquals(15, meta.getColumnCount());
+    assertEquals(16, meta.getColumnCount());
 
     assertTrue(colRS.next());
 
@@ -1040,6 +1043,13 @@ public class TestJdbcDriver2 extends TestCase {
     assertEquals(29, meta.getPrecision(15));
     assertEquals(9, meta.getScale(15));
 
+    assertEquals("c18", meta.getColumnName(16));
+    assertEquals(Types.DECIMAL, meta.getColumnType(16));
+    assertEquals("decimal", meta.getColumnTypeName(16));
+    assertEquals(Integer.MAX_VALUE, meta.getColumnDisplaySize(16));
+    assertEquals(Integer.MAX_VALUE, meta.getPrecision(16));
+    assertEquals(Integer.MAX_VALUE, meta.getScale(16));
+
     for (int i = 1; i <= meta.getColumnCount(); i++) {
       assertFalse(meta.isAutoIncrement(i));
       assertFalse(meta.isCurrency(i));
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Database.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Database.java
index 2d55c55..8fd2024 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Database.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Database.java
@@ -708,7 +708,7 @@ public class Database implements org.apache.thrift.TBase<Database, Database._Fie
                 for (int _i79 = 0; _i79 < _map78.size; ++_i79)
                 {
                   String _key80; // required
-                  String _val81; // optional
+                  String _val81; // required
                   _key80 = iprot.readString();
                   _val81 = iprot.readString();
                   struct.parameters.put(_key80, _val81);
@@ -858,7 +858,7 @@ public class Database implements org.apache.thrift.TBase<Database, Database._Fie
           for (int _i85 = 0; _i85 < _map84.size; ++_i85)
           {
             String _key86; // required
-            String _val87; // optional
+            String _val87; // required
             _key86 = iprot.readString();
             _val87 = iprot.readString();
             struct.parameters.put(_key86, _val87);
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EnvironmentContext.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EnvironmentContext.java
index 541eb8e..d97a190 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EnvironmentContext.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/EnvironmentContext.java
@@ -356,7 +356,7 @@ public class EnvironmentContext implements org.apache.thrift.TBase<EnvironmentCo
                 for (int _i247 = 0; _i247 < _map246.size; ++_i247)
                 {
                   String _key248; // required
-                  String _val249; // optional
+                  String _val249; // required
                   _key248 = iprot.readString();
                   _val249 = iprot.readString();
                   struct.properties.put(_key248, _val249);
@@ -439,7 +439,7 @@ public class EnvironmentContext implements org.apache.thrift.TBase<EnvironmentCo
           for (int _i253 = 0; _i253 < _map252.size; ++_i253)
           {
             String _key254; // required
-            String _val255; // optional
+            String _val255; // required
             _key254 = iprot.readString();
             _val255 = iprot.readString();
             struct.properties.put(_key254, _val255);
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Index.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Index.java
index e90b7fa..72791b7 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Index.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Index.java
@@ -1145,7 +1145,7 @@ public class Index implements org.apache.thrift.TBase<Index, Index._Fields>, jav
                 for (int _i211 = 0; _i211 < _map210.size; ++_i211)
                 {
                   String _key212; // required
-                  String _val213; // optional
+                  String _val213; // required
                   _key212 = iprot.readString();
                   _val213 = iprot.readString();
                   struct.parameters.put(_key212, _val213);
@@ -1362,7 +1362,7 @@ public class Index implements org.apache.thrift.TBase<Index, Index._Fields>, jav
           for (int _i217 = 0; _i217 < _map216.size; ++_i217)
           {
             String _key218; // required
-            String _val219; // optional
+            String _val219; // required
             _key218 = iprot.readString();
             _val219 = iprot.readString();
             struct.parameters.put(_key218, _val219);
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Partition.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Partition.java
index cca78ba..4329d34 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Partition.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Partition.java
@@ -1005,7 +1005,7 @@ public class Partition implements org.apache.thrift.TBase<Partition, Partition._
                 for (int _i196 = 0; _i196 < _map195.size; ++_i196)
                 {
                   String _key197; // required
-                  String _val198; // optional
+                  String _val198; // required
                   _key197 = iprot.readString();
                   _val198 = iprot.readString();
                   struct.parameters.put(_key197, _val198);
@@ -1219,7 +1219,7 @@ public class Partition implements org.apache.thrift.TBase<Partition, Partition._
           for (int _i207 = 0; _i207 < _map206.size; ++_i207)
           {
             String _key208; // required
-            String _val209; // optional
+            String _val209; // required
             _key208 = iprot.readString();
             _val209 = iprot.readString();
             struct.parameters.put(_key208, _val209);
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrincipalPrivilegeSet.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrincipalPrivilegeSet.java
index 73e086b..eea86e5 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrincipalPrivilegeSet.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/PrincipalPrivilegeSet.java
@@ -580,7 +580,7 @@ public class PrincipalPrivilegeSet implements org.apache.thrift.TBase<PrincipalP
                 for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                 {
                   String _key26; // required
-                  List<PrivilegeGrantInfo> _val27; // optional
+                  List<PrivilegeGrantInfo> _val27; // required
                   _key26 = iprot.readString();
                   {
                     org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
@@ -611,7 +611,7 @@ public class PrincipalPrivilegeSet implements org.apache.thrift.TBase<PrincipalP
                 for (int _i32 = 0; _i32 < _map31.size; ++_i32)
                 {
                   String _key33; // required
-                  List<PrivilegeGrantInfo> _val34; // optional
+                  List<PrivilegeGrantInfo> _val34; // required
                   _key33 = iprot.readString();
                   {
                     org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
@@ -642,7 +642,7 @@ public class PrincipalPrivilegeSet implements org.apache.thrift.TBase<PrincipalP
                 for (int _i39 = 0; _i39 < _map38.size; ++_i39)
                 {
                   String _key40; // required
-                  List<PrivilegeGrantInfo> _val41; // optional
+                  List<PrivilegeGrantInfo> _val41; // required
                   _key40 = iprot.readString();
                   {
                     org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
@@ -827,7 +827,7 @@ public class PrincipalPrivilegeSet implements org.apache.thrift.TBase<PrincipalP
           for (int _i58 = 0; _i58 < _map57.size; ++_i58)
           {
             String _key59; // required
-            List<PrivilegeGrantInfo> _val60; // optional
+            List<PrivilegeGrantInfo> _val60; // required
             _key59 = iprot.readString();
             {
               org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
@@ -852,7 +852,7 @@ public class PrincipalPrivilegeSet implements org.apache.thrift.TBase<PrincipalP
           for (int _i65 = 0; _i65 < _map64.size; ++_i65)
           {
             String _key66; // required
-            List<PrivilegeGrantInfo> _val67; // optional
+            List<PrivilegeGrantInfo> _val67; // required
             _key66 = iprot.readString();
             {
               org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
@@ -877,7 +877,7 @@ public class PrincipalPrivilegeSet implements org.apache.thrift.TBase<PrincipalP
           for (int _i72 = 0; _i72 < _map71.size; ++_i72)
           {
             String _key73; // required
-            List<PrivilegeGrantInfo> _val74; // optional
+            List<PrivilegeGrantInfo> _val74; // required
             _key73 = iprot.readString();
             {
               org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java
index 2aa0aed..f6af8d9 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Schema.java
@@ -476,7 +476,7 @@ public class Schema implements org.apache.thrift.TBase<Schema, Schema._Fields>,
                 for (int _i232 = 0; _i232 < _map231.size; ++_i232)
                 {
                   String _key233; // required
-                  String _val234; // optional
+                  String _val234; // required
                   _key233 = iprot.readString();
                   _val234 = iprot.readString();
                   struct.properties.put(_key233, _val234);
@@ -597,7 +597,7 @@ public class Schema implements org.apache.thrift.TBase<Schema, Schema._Fields>,
           for (int _i243 = 0; _i243 < _map242.size; ++_i243)
           {
             String _key244; // required
-            String _val245; // optional
+            String _val245; // required
             _key244 = iprot.readString();
             _val245 = iprot.readString();
             struct.properties.put(_key244, _val245);
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SerDeInfo.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SerDeInfo.java
index 62de891..8299b22 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SerDeInfo.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SerDeInfo.java
@@ -534,7 +534,7 @@ public class SerDeInfo implements org.apache.thrift.TBase<SerDeInfo, SerDeInfo._
                 for (int _i89 = 0; _i89 < _map88.size; ++_i89)
                 {
                   String _key90; // required
-                  String _val91; // optional
+                  String _val91; // required
                   _key90 = iprot.readString();
                   _val91 = iprot.readString();
                   struct.parameters.put(_key90, _val91);
@@ -647,7 +647,7 @@ public class SerDeInfo implements org.apache.thrift.TBase<SerDeInfo, SerDeInfo._
           for (int _i95 = 0; _i95 < _map94.size; ++_i95)
           {
             String _key96; // required
-            String _val97; // optional
+            String _val97; // required
             _key96 = iprot.readString();
             _val97 = iprot.readString();
             struct.parameters.put(_key96, _val97);
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
index 018ee77..2ad42a2 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/SkewedInfo.java
@@ -613,7 +613,7 @@ public class SkewedInfo implements org.apache.thrift.TBase<SkewedInfo, SkewedInf
                 for (int _i108 = 0; _i108 < _map107.size; ++_i108)
                 {
                   List<String> _key109; // required
-                  String _val110; // optional
+                  String _val110; // required
                   {
                     org.apache.thrift.protocol.TList _list111 = iprot.readListBegin();
                     _key109 = new ArrayList<String>(_list111.size);
@@ -815,7 +815,7 @@ public class SkewedInfo implements org.apache.thrift.TBase<SkewedInfo, SkewedInf
           for (int _i134 = 0; _i134 < _map133.size; ++_i134)
           {
             List<String> _key135; // required
-            String _val136; // optional
+            String _val136; // required
             {
               org.apache.thrift.protocol.TList _list137 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
               _key135 = new ArrayList<String>(_list137.size);
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StorageDescriptor.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StorageDescriptor.java
index dd73bb7..0a2f2c2 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StorageDescriptor.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/StorageDescriptor.java
@@ -1410,7 +1410,7 @@ public class StorageDescriptor implements org.apache.thrift.TBase<StorageDescrip
                 for (int _i150 = 0; _i150 < _map149.size; ++_i150)
                 {
                   String _key151; // required
-                  String _val152; // optional
+                  String _val152; // required
                   _key151 = iprot.readString();
                   _val152 = iprot.readString();
                   struct.parameters.put(_key151, _val152);
@@ -1734,7 +1734,7 @@ public class StorageDescriptor implements org.apache.thrift.TBase<StorageDescrip
           for (int _i171 = 0; _i171 < _map170.size; ++_i171)
           {
             String _key172; // required
-            String _val173; // optional
+            String _val173; // required
             _key172 = iprot.readString();
             _val173 = iprot.readString();
             struct.parameters.put(_key172, _val173);
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Table.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Table.java
index 97915c3..377cafe 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Table.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/Table.java
@@ -1423,7 +1423,7 @@ public class Table implements org.apache.thrift.TBase<Table, Table._Fields>, jav
                 for (int _i178 = 0; _i178 < _map177.size; ++_i178)
                 {
                   String _key179; // required
-                  String _val180; // optional
+                  String _val180; // required
                   _key179 = iprot.readString();
                   _val180 = iprot.readString();
                   struct.parameters.put(_key179, _val180);
@@ -1723,7 +1723,7 @@ public class Table implements org.apache.thrift.TBase<Table, Table._Fields>, jav
           for (int _i189 = 0; _i189 < _map188.size; ++_i189)
           {
             String _key190; // required
-            String _val191; // optional
+            String _val191; // required
             _key190 = iprot.readString();
             _val191 = iprot.readString();
             struct.parameters.put(_key190, _val191);
diff --git a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
index 46eced5..6694b24 100644
--- a/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
+++ b/src/metastore/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/metastore/api/ThriftHiveMetastore.java
@@ -16721,7 +16721,7 @@ public class ThriftHiveMetastore {
                   for (int _i273 = 0; _i273 < _map272.size; ++_i273)
                   {
                     String _key274; // required
-                    Type _val275; // optional
+                    Type _val275; // required
                     _key274 = iprot.readString();
                     _val275 = new Type();
                     _val275.read(iprot);
@@ -16825,7 +16825,7 @@ public class ThriftHiveMetastore {
             for (int _i279 = 0; _i279 < _map278.size; ++_i279)
             {
               String _key280; // required
-              Type _val281; // optional
+              Type _val281; // required
               _key280 = iprot.readString();
               _val281 = new Type();
               _val281.read(iprot);
@@ -59785,7 +59785,7 @@ public class ThriftHiveMetastore {
                   for (int _i523 = 0; _i523 < _map522.size; ++_i523)
                   {
                     String _key524; // required
-                    String _val525; // optional
+                    String _val525; // required
                     _key524 = iprot.readString();
                     _val525 = iprot.readString();
                     struct.success.put(_key524, _val525);
@@ -59888,7 +59888,7 @@ public class ThriftHiveMetastore {
             for (int _i529 = 0; _i529 < _map528.size; ++_i529)
             {
               String _key530; // required
-              String _val531; // optional
+              String _val531; // required
               _key530 = iprot.readString();
               _val531 = iprot.readString();
               struct.success.put(_key530, _val531);
@@ -60502,7 +60502,7 @@ public class ThriftHiveMetastore {
                   for (int _i533 = 0; _i533 < _map532.size; ++_i533)
                   {
                     String _key534; // required
-                    String _val535; // optional
+                    String _val535; // required
                     _key534 = iprot.readString();
                     _val535 = iprot.readString();
                     struct.part_vals.put(_key534, _val535);
@@ -60634,7 +60634,7 @@ public class ThriftHiveMetastore {
             for (int _i539 = 0; _i539 < _map538.size; ++_i539)
             {
               String _key540; // required
-              String _val541; // optional
+              String _val541; // required
               _key540 = iprot.readString();
               _val541 = iprot.readString();
               struct.part_vals.put(_key540, _val541);
@@ -62137,7 +62137,7 @@ public class ThriftHiveMetastore {
                   for (int _i543 = 0; _i543 < _map542.size; ++_i543)
                   {
                     String _key544; // required
-                    String _val545; // optional
+                    String _val545; // required
                     _key544 = iprot.readString();
                     _val545 = iprot.readString();
                     struct.part_vals.put(_key544, _val545);
@@ -62269,7 +62269,7 @@ public class ThriftHiveMetastore {
             for (int _i549 = 0; _i549 < _map548.size; ++_i549)
             {
               String _key550; // required
-              String _val551; // optional
+              String _val551; // required
               _key550 = iprot.readString();
               _val551 = iprot.readString();
               struct.part_vals.put(_key550, _val551);
diff --git a/src/metastore/src/gen/thrift/gen-php/ThriftHiveMetastore.php b/src/metastore/src/gen/thrift/gen-php/ThriftHiveMetastore.php
deleted file mode 100644
index e69de29..0000000
diff --git a/src/metastore/src/gen/thrift/gen-php/hive_metastore_constants.php b/src/metastore/src/gen/thrift/gen-php/hive_metastore_constants.php
deleted file mode 100644
index e69de29..0000000
diff --git a/src/metastore/src/gen/thrift/gen-php/hive_metastore_types.php b/src/metastore/src/gen/thrift/gen-php/hive_metastore_types.php
deleted file mode 100644
index e69de29..0000000
diff --git a/src/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote b/src/metastore/src/gen/thrift/gen-py/hive_metastore/ThriftHiveMetastore-remote
old mode 100644
new mode 100755
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java
index 47079ce..f1c9e2d 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Operator.java
@@ -810,7 +810,7 @@ public class Operator implements org.apache.thrift.TBase<Operator, Operator._Fie
                 for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                 {
                   String _key26; // required
-                  String _val27; // optional
+                  String _val27; // required
                   _key26 = iprot.readString();
                   _val27 = iprot.readString();
                   struct.operatorAttributes.put(_key26, _val27);
@@ -830,7 +830,7 @@ public class Operator implements org.apache.thrift.TBase<Operator, Operator._Fie
                 for (int _i29 = 0; _i29 < _map28.size; ++_i29)
                 {
                   String _key30; // required
-                  long _val31; // optional
+                  long _val31; // required
                   _key30 = iprot.readString();
                   _val31 = iprot.readI64();
                   struct.operatorCounters.put(_key30, _val31);
@@ -1003,7 +1003,7 @@ public class Operator implements org.apache.thrift.TBase<Operator, Operator._Fie
           for (int _i37 = 0; _i37 < _map36.size; ++_i37)
           {
             String _key38; // required
-            String _val39; // optional
+            String _val39; // required
             _key38 = iprot.readString();
             _val39 = iprot.readString();
             struct.operatorAttributes.put(_key38, _val39);
@@ -1018,7 +1018,7 @@ public class Operator implements org.apache.thrift.TBase<Operator, Operator._Fie
           for (int _i41 = 0; _i41 < _map40.size; ++_i41)
           {
             String _key42; // required
-            long _val43; // optional
+            long _val43; // required
             _key42 = iprot.readString();
             _val43 = iprot.readI64();
             struct.operatorCounters.put(_key42, _val43);
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java
index 0a10e54..e0d77e8 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Query.java
@@ -983,7 +983,7 @@ public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, jav
                 for (int _i101 = 0; _i101 < _map100.size; ++_i101)
                 {
                   String _key102; // required
-                  String _val103; // optional
+                  String _val103; // required
                   _key102 = iprot.readString();
                   _val103 = iprot.readString();
                   struct.queryAttributes.put(_key102, _val103);
@@ -1003,7 +1003,7 @@ public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, jav
                 for (int _i105 = 0; _i105 < _map104.size; ++_i105)
                 {
                   String _key106; // required
-                  long _val107; // optional
+                  long _val107; // required
                   _key106 = iprot.readString();
                   _val107 = iprot.readI64();
                   struct.queryCounters.put(_key106, _val107);
@@ -1239,7 +1239,7 @@ public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, jav
           for (int _i118 = 0; _i118 < _map117.size; ++_i118)
           {
             String _key119; // required
-            String _val120; // optional
+            String _val120; // required
             _key119 = iprot.readString();
             _val120 = iprot.readString();
             struct.queryAttributes.put(_key119, _val120);
@@ -1254,7 +1254,7 @@ public class Query implements org.apache.thrift.TBase<Query, Query._Fields>, jav
           for (int _i122 = 0; _i122 < _map121.size; ++_i122)
           {
             String _key123; // required
-            long _val124; // optional
+            long _val124; // required
             _key123 = iprot.readString();
             _val124 = iprot.readI64();
             struct.queryCounters.put(_key123, _val124);
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java
index cf2a52b..c341db2 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Stage.java
@@ -911,7 +911,7 @@ public class Stage implements org.apache.thrift.TBase<Stage, Stage._Fields>, jav
                 for (int _i73 = 0; _i73 < _map72.size; ++_i73)
                 {
                   String _key74; // required
-                  String _val75; // optional
+                  String _val75; // required
                   _key74 = iprot.readString();
                   _val75 = iprot.readString();
                   struct.stageAttributes.put(_key74, _val75);
@@ -931,7 +931,7 @@ public class Stage implements org.apache.thrift.TBase<Stage, Stage._Fields>, jav
                 for (int _i77 = 0; _i77 < _map76.size; ++_i77)
                 {
                   String _key78; // required
-                  long _val79; // optional
+                  long _val79; // required
                   _key78 = iprot.readString();
                   _val79 = iprot.readI64();
                   struct.stageCounters.put(_key78, _val79);
@@ -1147,7 +1147,7 @@ public class Stage implements org.apache.thrift.TBase<Stage, Stage._Fields>, jav
           for (int _i90 = 0; _i90 < _map89.size; ++_i90)
           {
             String _key91; // required
-            String _val92; // optional
+            String _val92; // required
             _key91 = iprot.readString();
             _val92 = iprot.readString();
             struct.stageAttributes.put(_key91, _val92);
@@ -1162,7 +1162,7 @@ public class Stage implements org.apache.thrift.TBase<Stage, Stage._Fields>, jav
           for (int _i94 = 0; _i94 < _map93.size; ++_i94)
           {
             String _key95; // required
-            long _val96; // optional
+            long _val96; // required
             _key95 = iprot.readString();
             _val96 = iprot.readI64();
             struct.stageCounters.put(_key95, _val96);
diff --git a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java
index f7bfabf..fc4313f 100644
--- a/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java
+++ b/src/ql/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/ql/plan/api/Task.java
@@ -996,7 +996,7 @@ public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.i
                 for (int _i45 = 0; _i45 < _map44.size; ++_i45)
                 {
                   String _key46; // required
-                  String _val47; // optional
+                  String _val47; // required
                   _key46 = iprot.readString();
                   _val47 = iprot.readString();
                   struct.taskAttributes.put(_key46, _val47);
@@ -1016,7 +1016,7 @@ public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.i
                 for (int _i49 = 0; _i49 < _map48.size; ++_i49)
                 {
                   String _key50; // required
-                  long _val51; // optional
+                  long _val51; // required
                   _key50 = iprot.readString();
                   _val51 = iprot.readI64();
                   struct.taskCounters.put(_key50, _val51);
@@ -1256,7 +1256,7 @@ public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.i
           for (int _i62 = 0; _i62 < _map61.size; ++_i62)
           {
             String _key63; // required
-            String _val64; // optional
+            String _val64; // required
             _key63 = iprot.readString();
             _val64 = iprot.readString();
             struct.taskAttributes.put(_key63, _val64);
@@ -1271,7 +1271,7 @@ public class Task implements org.apache.thrift.TBase<Task, Task._Fields>, java.i
           for (int _i66 = 0; _i66 < _map65.size; ++_i66)
           {
             String _key67; // required
-            long _val68; // optional
+            long _val68; // required
             _key67 = iprot.readString();
             _val68 = iprot.readI64();
             struct.taskCounters.put(_key67, _val68);
diff --git a/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/Complex.java b/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/Complex.java
index 71e836c..e36a792 100644
--- a/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/Complex.java
+++ b/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/Complex.java
@@ -892,7 +892,7 @@ public class Complex implements org.apache.thrift.TBase<Complex, Complex._Fields
                 for (int _i10 = 0; _i10 < _map9.size; ++_i10)
                 {
                   String _key11; // required
-                  String _val12; // optional
+                  String _val12; // required
                   _key11 = iprot.readString();
                   _val12 = iprot.readString();
                   struct.mStringString.put(_key11, _val12);
@@ -1115,7 +1115,7 @@ public class Complex implements org.apache.thrift.TBase<Complex, Complex._Fields
           for (int _i31 = 0; _i31 < _map30.size; ++_i31)
           {
             String _key32; // required
-            String _val33; // optional
+            String _val33; // required
             _key32 = iprot.readString();
             _val33 = iprot.readString();
             struct.mStringString.put(_key32, _val33);
diff --git a/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/MegaStruct.java b/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/MegaStruct.java
index b41eb82..386fef9 100644
--- a/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/MegaStruct.java
+++ b/src/serde/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/serde2/thrift/test/MegaStruct.java
@@ -2192,7 +2192,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
                 for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                 {
                   String _key2; // required
-                  String _val3; // optional
+                  String _val3; // required
                   _key2 = iprot.readString();
                   _val3 = iprot.readString();
                   struct.my_string_string_map.put(_key2, _val3);
@@ -2212,7 +2212,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
                 for (int _i5 = 0; _i5 < _map4.size; ++_i5)
                 {
                   String _key6; // required
-                  MyEnum _val7; // optional
+                  MyEnum _val7; // required
                   _key6 = iprot.readString();
                   _val7 = MyEnum.findByValue(iprot.readI32());
                   struct.my_string_enum_map.put(_key6, _val7);
@@ -2232,7 +2232,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
                 for (int _i9 = 0; _i9 < _map8.size; ++_i9)
                 {
                   MyEnum _key10; // required
-                  String _val11; // optional
+                  String _val11; // required
                   _key10 = MyEnum.findByValue(iprot.readI32());
                   _val11 = iprot.readString();
                   struct.my_enum_string_map.put(_key10, _val11);
@@ -2252,7 +2252,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
                 for (int _i13 = 0; _i13 < _map12.size; ++_i13)
                 {
                   MyEnum _key14; // required
-                  MiniStruct _val15; // optional
+                  MiniStruct _val15; // required
                   _key14 = MyEnum.findByValue(iprot.readI32());
                   _val15 = new MiniStruct();
                   _val15.read(iprot);
@@ -2273,7 +2273,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
                 for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                 {
                   MyEnum _key18; // required
-                  List<String> _val19; // optional
+                  List<String> _val19; // required
                   _key18 = MyEnum.findByValue(iprot.readI32());
                   {
                     org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
@@ -2303,7 +2303,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
                 for (int _i24 = 0; _i24 < _map23.size; ++_i24)
                 {
                   MyEnum _key25; // required
-                  List<MiniStruct> _val26; // optional
+                  List<MiniStruct> _val26; // required
                   _key25 = MyEnum.findByValue(iprot.readI32());
                   {
                     org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
@@ -2955,7 +2955,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
           for (int _i77 = 0; _i77 < _map76.size; ++_i77)
           {
             String _key78; // required
-            String _val79; // optional
+            String _val79; // required
             _key78 = iprot.readString();
             _val79 = iprot.readString();
             struct.my_string_string_map.put(_key78, _val79);
@@ -2970,7 +2970,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
           for (int _i81 = 0; _i81 < _map80.size; ++_i81)
           {
             String _key82; // required
-            MyEnum _val83; // optional
+            MyEnum _val83; // required
             _key82 = iprot.readString();
             _val83 = MyEnum.findByValue(iprot.readI32());
             struct.my_string_enum_map.put(_key82, _val83);
@@ -2985,7 +2985,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
           for (int _i85 = 0; _i85 < _map84.size; ++_i85)
           {
             MyEnum _key86; // required
-            String _val87; // optional
+            String _val87; // required
             _key86 = MyEnum.findByValue(iprot.readI32());
             _val87 = iprot.readString();
             struct.my_enum_string_map.put(_key86, _val87);
@@ -3000,7 +3000,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
           for (int _i89 = 0; _i89 < _map88.size; ++_i89)
           {
             MyEnum _key90; // required
-            MiniStruct _val91; // optional
+            MiniStruct _val91; // required
             _key90 = MyEnum.findByValue(iprot.readI32());
             _val91 = new MiniStruct();
             _val91.read(iprot);
@@ -3016,7 +3016,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
           for (int _i93 = 0; _i93 < _map92.size; ++_i93)
           {
             MyEnum _key94; // required
-            List<String> _val95; // optional
+            List<String> _val95; // required
             _key94 = MyEnum.findByValue(iprot.readI32());
             {
               org.apache.thrift.protocol.TList _list96 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
@@ -3040,7 +3040,7 @@ public class MegaStruct implements org.apache.thrift.TBase<MegaStruct, MegaStruc
           for (int _i100 = 0; _i100 < _map99.size; ++_i100)
           {
             MyEnum _key101; // required
-            List<MiniStruct> _val102; // optional
+            List<MiniStruct> _val102; // required
             _key101 = MyEnum.findByValue(iprot.readI32());
             {
               org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
diff --git a/src/service/if/TCLIService.thrift b/src/service/if/TCLIService.thrift
index 1596958..4d7e89e 100644
--- a/src/service/if/TCLIService.thrift
+++ b/src/service/if/TCLIService.thrift
@@ -56,7 +56,8 @@ enum TTypeId {
   MAP_TYPE,
   STRUCT_TYPE,
   UNION_TYPE,
-  USER_DEFINED_TYPE
+  USER_DEFINED_TYPE,
+  DECIMAL_TYPE
 }
   
 const set<TTypeId> PRIMITIVE_TYPES = [
@@ -69,7 +70,8 @@ const set<TTypeId> PRIMITIVE_TYPES = [
   TTypeId.DOUBLE_TYPE
   TTypeId.STRING_TYPE
   TTypeId.TIMESTAMP_TYPE
-  TTypeId.BINARY_TYPE
+  TTypeId.BINARY_TYPE,
+  TTypeId.DECIMAL_TYPE
 ]
 
 const set<TTypeId> COMPLEX_TYPES = [
@@ -100,6 +102,7 @@ const map<TTypeId,string> TYPE_NAMES = {
   TTypeId.MAP_TYPE: "MAP",
   TTypeId.STRUCT_TYPE: "STRUCT",
   TTypeId.UNION_TYPE: "UNIONTYPE"
+  TTypeId.DECIMAL_TYPE: "DECIMAL"
 }
 
 // Thrift does not support recursively defined types or forward declarations,
@@ -282,7 +285,7 @@ union TColumnValue {
   4: TI32Value    i32Val       // INT
   5: TI64Value    i64Val       // BIGINT, TIMESTAMP
   6: TDoubleValue doubleVal    // FLOAT, DOUBLE
-  7: TStringValue stringVal    // STRING, LIST, MAP, STRUCT, UNIONTYPE, BINARY
+  7: TStringValue stringVal    // STRING, LIST, MAP, STRUCT, UNIONTYPE, BINARY, DECIMAL
 }
 
 // Represents a row in a rowset.
diff --git a/src/service/src/gen/thrift/gen-cpp/TCLIService_constants.cpp b/src/service/src/gen/thrift/gen-cpp/TCLIService_constants.cpp
index 114203d..53cd96b 100644
--- a/src/service/src/gen/thrift/gen-cpp/TCLIService_constants.cpp
+++ b/src/service/src/gen/thrift/gen-cpp/TCLIService_constants.cpp
@@ -21,6 +21,7 @@ TCLIServiceConstants::TCLIServiceConstants() {
   PRIMITIVE_TYPES.insert((TTypeId::type)7);
   PRIMITIVE_TYPES.insert((TTypeId::type)8);
   PRIMITIVE_TYPES.insert((TTypeId::type)9);
+  PRIMITIVE_TYPES.insert((TTypeId::type)15);
 
   COMPLEX_TYPES.insert((TTypeId::type)10);
   COMPLEX_TYPES.insert((TTypeId::type)11);
@@ -45,6 +46,7 @@ TCLIServiceConstants::TCLIServiceConstants() {
   TYPE_NAMES.insert(std::make_pair((TTypeId::type)11, "MAP"));
   TYPE_NAMES.insert(std::make_pair((TTypeId::type)12, "STRUCT"));
   TYPE_NAMES.insert(std::make_pair((TTypeId::type)13, "UNIONTYPE"));
+  TYPE_NAMES.insert(std::make_pair((TTypeId::type)15, "DECIMAL"));
 
 }
 
diff --git a/src/service/src/gen/thrift/gen-cpp/TCLIService_types.cpp b/src/service/src/gen/thrift/gen-cpp/TCLIService_types.cpp
index 0e92a36..ef47f5c 100644
--- a/src/service/src/gen/thrift/gen-cpp/TCLIService_types.cpp
+++ b/src/service/src/gen/thrift/gen-cpp/TCLIService_types.cpp
@@ -33,7 +33,8 @@ int _kTTypeIdValues[] = {
   TTypeId::MAP_TYPE,
   TTypeId::STRUCT_TYPE,
   TTypeId::UNION_TYPE,
-  TTypeId::USER_DEFINED_TYPE
+  TTypeId::USER_DEFINED_TYPE,
+  TTypeId::DECIMAL_TYPE
 };
 const char* _kTTypeIdNames[] = {
   "BOOLEAN_TYPE",
@@ -50,9 +51,10 @@ const char* _kTTypeIdNames[] = {
   "MAP_TYPE",
   "STRUCT_TYPE",
   "UNION_TYPE",
-  "USER_DEFINED_TYPE"
+  "USER_DEFINED_TYPE",
+  "DECIMAL_TYPE"
 };
-const std::map<int, const char*> _TTypeId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(15, _kTTypeIdValues, _kTTypeIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));
+const std::map<int, const char*> _TTypeId_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(16, _kTTypeIdValues, _kTTypeIdNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));
 
 int _kTStatusCodeValues[] = {
   TStatusCode::SUCCESS_STATUS,
diff --git a/src/service/src/gen/thrift/gen-cpp/TCLIService_types.h b/src/service/src/gen/thrift/gen-cpp/TCLIService_types.h
index 07230d7..f1d846b 100644
--- a/src/service/src/gen/thrift/gen-cpp/TCLIService_types.h
+++ b/src/service/src/gen/thrift/gen-cpp/TCLIService_types.h
@@ -40,7 +40,8 @@ struct TTypeId {
     MAP_TYPE = 11,
     STRUCT_TYPE = 12,
     UNION_TYPE = 13,
-    USER_DEFINED_TYPE = 14
+    USER_DEFINED_TYPE = 14,
+    DECIMAL_TYPE = 15
   };
 };
 
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCLIServiceConstants.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCLIServiceConstants.java
index 60b883f..e08d85b 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCLIServiceConstants.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TCLIServiceConstants.java
@@ -45,6 +45,7 @@ public class TCLIServiceConstants {
     PRIMITIVE_TYPES.add(org.apache.hive.service.cli.thrift.TTypeId.STRING_TYPE);
     PRIMITIVE_TYPES.add(org.apache.hive.service.cli.thrift.TTypeId.TIMESTAMP_TYPE);
     PRIMITIVE_TYPES.add(org.apache.hive.service.cli.thrift.TTypeId.BINARY_TYPE);
+    PRIMITIVE_TYPES.add(org.apache.hive.service.cli.thrift.TTypeId.DECIMAL_TYPE);
   }
 
   public static final Set<TTypeId> COMPLEX_TYPES = new HashSet<TTypeId>();
@@ -78,6 +79,7 @@ public class TCLIServiceConstants {
     TYPE_NAMES.put(org.apache.hive.service.cli.thrift.TTypeId.MAP_TYPE, "MAP");
     TYPE_NAMES.put(org.apache.hive.service.cli.thrift.TTypeId.STRUCT_TYPE, "STRUCT");
     TYPE_NAMES.put(org.apache.hive.service.cli.thrift.TTypeId.UNION_TYPE, "UNIONTYPE");
+    TYPE_NAMES.put(org.apache.hive.service.cli.thrift.TTypeId.DECIMAL_TYPE, "DECIMAL");
   }
 
 }
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TExecuteStatementReq.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TExecuteStatementReq.java
index a55b464..24568a1 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TExecuteStatementReq.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TExecuteStatementReq.java
@@ -547,7 +547,7 @@ public class TExecuteStatementReq implements org.apache.thrift.TBase<TExecuteSta
                 for (int _i145 = 0; _i145 < _map144.size; ++_i145)
                 {
                   String _key146; // required
-                  String _val147; // optional
+                  String _val147; // required
                   _key146 = iprot.readString();
                   _val147 = iprot.readString();
                   struct.confOverlay.put(_key146, _val147);
@@ -649,7 +649,7 @@ public class TExecuteStatementReq implements org.apache.thrift.TBase<TExecuteSta
           for (int _i151 = 0; _i151 < _map150.size; ++_i151)
           {
             String _key152; // required
-            String _val153; // optional
+            String _val153; // required
             _key152 = iprot.readString();
             _val153 = iprot.readString();
             struct.confOverlay.put(_key152, _val153);
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionReq.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionReq.java
index 59c3817..d026adf 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionReq.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionReq.java
@@ -643,7 +643,7 @@ public class TOpenSessionReq implements org.apache.thrift.TBase<TOpenSessionReq,
                 for (int _i125 = 0; _i125 < _map124.size; ++_i125)
                 {
                   String _key126; // required
-                  String _val127; // optional
+                  String _val127; // required
                   _key126 = iprot.readString();
                   _val127 = iprot.readString();
                   struct.configuration.put(_key126, _val127);
@@ -770,7 +770,7 @@ public class TOpenSessionReq implements org.apache.thrift.TBase<TOpenSessionReq,
           for (int _i131 = 0; _i131 < _map130.size; ++_i131)
           {
             String _key132; // required
-            String _val133; // optional
+            String _val133; // required
             _key132 = iprot.readString();
             _val133 = iprot.readString();
             struct.configuration.put(_key132, _val133);
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionResp.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionResp.java
index af21391..e70d63a 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionResp.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TOpenSessionResp.java
@@ -655,7 +655,7 @@ public class TOpenSessionResp implements org.apache.thrift.TBase<TOpenSessionRes
                 for (int _i135 = 0; _i135 < _map134.size; ++_i135)
                 {
                   String _key136; // required
-                  String _val137; // optional
+                  String _val137; // required
                   _key136 = iprot.readString();
                   _val137 = iprot.readString();
                   struct.configuration.put(_key136, _val137);
@@ -775,7 +775,7 @@ public class TOpenSessionResp implements org.apache.thrift.TBase<TOpenSessionRes
           for (int _i141 = 0; _i141 < _map140.size; ++_i141)
           {
             String _key142; // required
-            String _val143; // optional
+            String _val143; // required
             _key142 = iprot.readString();
             _val143 = iprot.readString();
             struct.configuration.put(_key142, _val143);
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TStructTypeEntry.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TStructTypeEntry.java
index f3e43b5..d12238f 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TStructTypeEntry.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TStructTypeEntry.java
@@ -360,7 +360,7 @@ public class TStructTypeEntry implements org.apache.thrift.TBase<TStructTypeEntr
                 for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                 {
                   String _key2; // required
-                  int _val3; // optional
+                  int _val3; // required
                   _key2 = iprot.readString();
                   _val3 = iprot.readI32();
                   struct.nameToTypePtr.put(_key2, _val3);
@@ -434,7 +434,7 @@ public class TStructTypeEntry implements org.apache.thrift.TBase<TStructTypeEntr
         for (int _i7 = 0; _i7 < _map6.size; ++_i7)
         {
           String _key8; // required
-          int _val9; // optional
+          int _val9; // required
           _key8 = iprot.readString();
           _val9 = iprot.readI32();
           struct.nameToTypePtr.put(_key8, _val9);
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TTypeId.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TTypeId.java
index cfa957b..d9a7172 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TTypeId.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TTypeId.java
@@ -26,7 +26,8 @@ public enum TTypeId implements org.apache.thrift.TEnum {
   MAP_TYPE(11),
   STRUCT_TYPE(12),
   UNION_TYPE(13),
-  USER_DEFINED_TYPE(14);
+  USER_DEFINED_TYPE(14),
+  DECIMAL_TYPE(15);
 
   private final int value;
 
@@ -77,6 +78,8 @@ public enum TTypeId implements org.apache.thrift.TEnum {
         return UNION_TYPE;
       case 14:
         return USER_DEFINED_TYPE;
+      case 15:
+        return DECIMAL_TYPE;
       default:
         return null;
     }
diff --git a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TUnionTypeEntry.java b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TUnionTypeEntry.java
index 43528ac..9254547 100644
--- a/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TUnionTypeEntry.java
+++ b/src/service/src/gen/thrift/gen-javabean/org/apache/hive/service/cli/thrift/TUnionTypeEntry.java
@@ -360,7 +360,7 @@ public class TUnionTypeEntry implements org.apache.thrift.TBase<TUnionTypeEntry,
                 for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                 {
                   String _key12; // required
-                  int _val13; // optional
+                  int _val13; // required
                   _key12 = iprot.readString();
                   _val13 = iprot.readI32();
                   struct.nameToTypePtr.put(_key12, _val13);
@@ -434,7 +434,7 @@ public class TUnionTypeEntry implements org.apache.thrift.TBase<TUnionTypeEntry,
         for (int _i17 = 0; _i17 < _map16.size; ++_i17)
         {
           String _key18; // required
-          int _val19; // optional
+          int _val19; // required
           _key18 = iprot.readString();
           _val19 = iprot.readI32();
           struct.nameToTypePtr.put(_key18, _val19);
diff --git a/src/service/src/gen/thrift/gen-py/TCLIService/TCLIService-remote b/src/service/src/gen/thrift/gen-py/TCLIService/TCLIService-remote
old mode 100644
new mode 100755
diff --git a/src/service/src/gen/thrift/gen-py/TCLIService/constants.py b/src/service/src/gen/thrift/gen-py/TCLIService/constants.py
index 842b955..fd24bc4 100644
--- a/src/service/src/gen/thrift/gen-py/TCLIService/constants.py
+++ b/src/service/src/gen/thrift/gen-py/TCLIService/constants.py
@@ -20,6 +20,7 @@ PRIMITIVE_TYPES = set([
     7,
     8,
     9,
+    15,
 ])
 COMPLEX_TYPES = set([
     10,
@@ -47,4 +48,5 @@ TYPE_NAMES = {
     11 : "MAP",
     12 : "STRUCT",
     13 : "UNIONTYPE",
+    15 : "DECIMAL",
 }
diff --git a/src/service/src/gen/thrift/gen-py/TCLIService/ttypes.py b/src/service/src/gen/thrift/gen-py/TCLIService/ttypes.py
index b4cebe0..171b8c1 100644
--- a/src/service/src/gen/thrift/gen-py/TCLIService/ttypes.py
+++ b/src/service/src/gen/thrift/gen-py/TCLIService/ttypes.py
@@ -43,6 +43,7 @@ class TTypeId:
   STRUCT_TYPE = 12
   UNION_TYPE = 13
   USER_DEFINED_TYPE = 14
+  DECIMAL_TYPE = 15
 
   _VALUES_TO_NAMES = {
     0: "BOOLEAN_TYPE",
@@ -60,6 +61,7 @@ class TTypeId:
     12: "STRUCT_TYPE",
     13: "UNION_TYPE",
     14: "USER_DEFINED_TYPE",
+    15: "DECIMAL_TYPE",
   }
 
   _NAMES_TO_VALUES = {
@@ -78,6 +80,7 @@ class TTypeId:
     "STRUCT_TYPE": 12,
     "UNION_TYPE": 13,
     "USER_DEFINED_TYPE": 14,
+    "DECIMAL_TYPE": 15,
   }
 
 class TStatusCode:
diff --git a/src/service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote b/src/service/src/gen/thrift/gen-py/hive_service/ThriftHive-remote
old mode 100644
new mode 100755
diff --git a/src/service/src/gen/thrift/gen-rb/t_c_l_i_service_constants.rb b/src/service/src/gen/thrift/gen-rb/t_c_l_i_service_constants.rb
index 1fd0370..586ed9c 100644
--- a/src/service/src/gen/thrift/gen-rb/t_c_l_i_service_constants.rb
+++ b/src/service/src/gen/thrift/gen-rb/t_c_l_i_service_constants.rb
@@ -18,6 +18,7 @@ PRIMITIVE_TYPES = Set.new([
     7,
     8,
     9,
+    15,
 ])
 
 COMPLEX_TYPES = Set.new([
@@ -48,5 +49,6 @@ TYPE_NAMES = {
     11 => %q"MAP",
     12 => %q"STRUCT",
     13 => %q"UNIONTYPE",
+    15 => %q"DECIMAL",
 }
 
diff --git a/src/service/src/gen/thrift/gen-rb/t_c_l_i_service_types.rb b/src/service/src/gen/thrift/gen-rb/t_c_l_i_service_types.rb
index 649453f..5336945 100644
--- a/src/service/src/gen/thrift/gen-rb/t_c_l_i_service_types.rb
+++ b/src/service/src/gen/thrift/gen-rb/t_c_l_i_service_types.rb
@@ -28,8 +28,9 @@ module TTypeId
   STRUCT_TYPE = 12
   UNION_TYPE = 13
   USER_DEFINED_TYPE = 14
-  VALUE_MAP = {0 => "BOOLEAN_TYPE", 1 => "TINYINT_TYPE", 2 => "SMALLINT_TYPE", 3 => "INT_TYPE", 4 => "BIGINT_TYPE", 5 => "FLOAT_TYPE", 6 => "DOUBLE_TYPE", 7 => "STRING_TYPE", 8 => "TIMESTAMP_TYPE", 9 => "BINARY_TYPE", 10 => "ARRAY_TYPE", 11 => "MAP_TYPE", 12 => "STRUCT_TYPE", 13 => "UNION_TYPE", 14 => "USER_DEFINED_TYPE"}
-  VALID_VALUES = Set.new([BOOLEAN_TYPE, TINYINT_TYPE, SMALLINT_TYPE, INT_TYPE, BIGINT_TYPE, FLOAT_TYPE, DOUBLE_TYPE, STRING_TYPE, TIMESTAMP_TYPE, BINARY_TYPE, ARRAY_TYPE, MAP_TYPE, STRUCT_TYPE, UNION_TYPE, USER_DEFINED_TYPE]).freeze
+  DECIMAL_TYPE = 15
+  VALUE_MAP = {0 => "BOOLEAN_TYPE", 1 => "TINYINT_TYPE", 2 => "SMALLINT_TYPE", 3 => "INT_TYPE", 4 => "BIGINT_TYPE", 5 => "FLOAT_TYPE", 6 => "DOUBLE_TYPE", 7 => "STRING_TYPE", 8 => "TIMESTAMP_TYPE", 9 => "BINARY_TYPE", 10 => "ARRAY_TYPE", 11 => "MAP_TYPE", 12 => "STRUCT_TYPE", 13 => "UNION_TYPE", 14 => "USER_DEFINED_TYPE", 15 => "DECIMAL_TYPE"}
+  VALID_VALUES = Set.new([BOOLEAN_TYPE, TINYINT_TYPE, SMALLINT_TYPE, INT_TYPE, BIGINT_TYPE, FLOAT_TYPE, DOUBLE_TYPE, STRING_TYPE, TIMESTAMP_TYPE, BINARY_TYPE, ARRAY_TYPE, MAP_TYPE, STRUCT_TYPE, UNION_TYPE, USER_DEFINED_TYPE, DECIMAL_TYPE]).freeze
 end
 
 module TStatusCode
diff --git a/src/service/src/java/org/apache/hive/service/cli/ColumnValue.java b/src/service/src/java/org/apache/hive/service/cli/ColumnValue.java
index ae4f850..c3327d3 100644
--- a/src/service/src/java/org/apache/hive/service/cli/ColumnValue.java
+++ b/src/service/src/java/org/apache/hive/service/cli/ColumnValue.java
@@ -18,6 +18,7 @@
 
 package org.apache.hive.service.cli;
 
+import java.math.BigDecimal;
 import java.sql.Timestamp;
 
 import org.apache.hive.service.cli.thrift.TBoolValue;
@@ -118,6 +119,14 @@ public class ColumnValue {
     return new ColumnValue(TColumnValue.stringVal(tStringValue));
   }
 
+  public static ColumnValue stringValue(BigDecimal value) {
+    TStringValue tStrValue = new TStringValue();
+    if (value != null) {
+      tStrValue.setValue(((BigDecimal)value).toString());
+    }
+    return new ColumnValue(TColumnValue.stringVal(tStrValue));
+  }
+
   public static ColumnValue newColumnValue(Type type, Object value) {
     switch (type) {
     case BOOLEAN_TYPE:
@@ -138,6 +147,8 @@ public class ColumnValue {
       return stringValue((String)value);
     case TIMESTAMP_TYPE:
       return timestampValue((Timestamp)value);
+    case DECIMAL_TYPE:
+      return stringValue(((BigDecimal)value));
     case BINARY_TYPE:
     case ARRAY_TYPE:
     case MAP_TYPE:
diff --git a/src/service/src/java/org/apache/hive/service/cli/Type.java b/src/service/src/java/org/apache/hive/service/cli/Type.java
index 64e445f..5d7295d 100644
--- a/src/service/src/java/org/apache/hive/service/cli/Type.java
+++ b/src/service/src/java/org/apache/hive/service/cli/Type.java
@@ -57,6 +57,10 @@ public enum Type {
   BINARY_TYPE("BINARY",
       java.sql.Types.BINARY,
       TTypeId.BINARY_TYPE),
+  DECIMAL_TYPE("DECIMAL",
+      java.sql.Types.DECIMAL,
+      TTypeId.DECIMAL_TYPE,
+      false, false),
   ARRAY_TYPE("ARRAY",
       java.sql.Types.VARCHAR,
       TTypeId.STRING_TYPE,
@@ -213,6 +217,8 @@ public enum Type {
       return 7;
     case DOUBLE_TYPE:
       return 15;
+    case DECIMAL_TYPE:
+      return Integer.MAX_VALUE;
     default:
       return null;
     }
@@ -250,6 +256,7 @@ public enum Type {
     case BIGINT_TYPE:
     case FLOAT_TYPE:
     case DOUBLE_TYPE:
+    case DECIMAL_TYPE:
       return true;
     default:
       return false;
-- 
1.7.0.4

