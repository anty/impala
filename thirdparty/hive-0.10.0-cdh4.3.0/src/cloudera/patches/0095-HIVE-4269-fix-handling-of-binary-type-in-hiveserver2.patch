From 0c10f6f94303c4dd27a8dfea22a345b74ebb9d3f Mon Sep 17 00:00:00 2001
From: Ashutosh Chauhan <hashutosh@apache.org>
Date: Wed, 3 Apr 2013 14:22:29 +0000
Subject: [PATCH 095/121] HIVE-4269 : fix handling of binary type in hiveserver2, jdbc driver (Thejas Nair via Ashutosh Chauhan)

git-svn-id: https://svn.apache.org/repos/asf/hive/trunk@1464037 13f79535-47bb-0310-9956-ffa450edef68
---
 data/files/datatypes.txt                           |    6 +++---
 .../org/apache/hive/jdbc/HiveBaseResultSet.java    |   14 ++++++++++++++
 .../apache/hive/jdbc/HiveResultSetMetaData.java    |    2 ++
 jdbc/src/java/org/apache/hive/jdbc/Utils.java      |    2 ++
 .../test/org/apache/hive/jdbc/TestJdbcDriver2.java |    8 +++++++-
 .../hive/service/cli/operation/SQLOperation.java   |   10 ++++++++--
 6 files changed, 36 insertions(+), 6 deletions(-)

diff --git a/src/data/files/datatypes.txt b/src/data/files/datatypes.txt
index 66ef826..40e43ff 100644
--- a/src/data/files/datatypes.txt
+++ b/src/data/files/datatypes.txt
@@ -1,3 +1,3 @@
-\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N
--1false-1.1\N\N\N-1-1-1.0-1\N\N\N\N
-1true1.11121x2ykva92.2111.01abcd1111213142212212x1abcd22012-04-22 09:00:00.123456789123456789.0123456
+\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N\N
+-1false-1.1\N\N\N-1-1-1.0-1\N\N\N\N\N
+1true1.11121x2ykva92.2111.01abcd1111213142212212x1abcd22012-04-22 09:00:00.123456789123456789.0123456YWJjZA==
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java
index a65499b..775ebee 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveBaseResultSet.java
@@ -439,6 +439,15 @@ public abstract class HiveBaseResultSet implements ResultSet {
     return null;
   }
 
+  private byte[] getBinaryValue(TStringValue tString) {
+    if (tString.isSetValue()) {
+      wasNull = false;
+      return tString.getValue().getBytes();
+    }
+    wasNull = true;
+    return null;
+  }
+
   private BigDecimal getBigDecimalValue(TStringValue tStringValue) {
     if (tStringValue.isSetValue()) {
       wasNull = false;
@@ -480,6 +489,8 @@ public abstract class HiveBaseResultSet implements ResultSet {
       return getDoubleValue(tColumnValue.getDoubleVal());
     case STRING_TYPE:
       return getStringValue(tColumnValue.getStringVal());
+    case BINARY_TYPE:
+      return getBinaryValue(tColumnValue.getStringVal());
     case TIMESTAMP_TYPE:
       return getTimestampValue(tColumnValue.getStringVal());
     case DECIMAL_TYPE:
@@ -588,6 +599,9 @@ public abstract class HiveBaseResultSet implements ResultSet {
     if (wasNull) {
       return null;
     }
+    if (value instanceof byte[]){
+      return new String((byte[])value);
+    }
     return value.toString();
   }
 
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/HiveResultSetMetaData.java b/src/jdbc/src/java/org/apache/hive/jdbc/HiveResultSetMetaData.java
index 1eb18b9..378ba30 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/HiveResultSetMetaData.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/HiveResultSetMetaData.java
@@ -114,6 +114,8 @@ public class HiveResultSetMetaData implements java.sql.ResultSetMetaData {
       return serdeConstants.TIMESTAMP_TYPE_NAME;
     } else if ("decimal".equalsIgnoreCase(type)) {
       return serdeConstants.DECIMAL_TYPE_NAME;
+    } else if ("binary".equalsIgnoreCase(type)) {
+      return serdeConstants.BINARY_TYPE_NAME;
     } else if (type.startsWith("map<")) {
       return serdeConstants.STRING_TYPE_NAME;
     } else if (type.startsWith("array<")) {
diff --git a/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java b/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
index ac25996..1dede62 100644
--- a/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
+++ b/src/jdbc/src/java/org/apache/hive/jdbc/Utils.java
@@ -133,6 +133,8 @@ public class Utils {
       return Types.TIMESTAMP;
     } else if ("decimal".equalsIgnoreCase(type)) {
       return Types.DECIMAL;
+    } else if ("binary".equalsIgnoreCase(type)) {
+      return Types.BINARY;
     } else if (type.startsWith("map<")) {
       return Types.VARCHAR;
     } else if (type.startsWith("array<")) {
diff --git a/src/jdbc/src/test/org/apache/hive/jdbc/TestJdbcDriver2.java b/src/jdbc/src/test/org/apache/hive/jdbc/TestJdbcDriver2.java
index 6f3d49c..bbbe0e4 100644
--- a/src/jdbc/src/test/org/apache/hive/jdbc/TestJdbcDriver2.java
+++ b/src/jdbc/src/test/org/apache/hive/jdbc/TestJdbcDriver2.java
@@ -151,7 +151,8 @@ public class TestJdbcDriver2 extends TestCase {
         + " c15 struct<r:int,s:struct<a:int,b:string>>,"
         + " c16 array<struct<m:map<string,string>,n:int>>,"
         + " c17 timestamp, "
-        + " c18 decimal) comment'" + dataTypeTableComment
+        + " c18 decimal, "
+        + " c19 binary) comment'" + dataTypeTableComment
             +"' partitioned by (dt STRING)");
 
     stmt.execute("load data local inpath '"
@@ -416,6 +417,9 @@ public class TestJdbcDriver2 extends TestCase {
     assertEquals(null, res.getString(14));
     assertEquals(null, res.getString(15));
     assertEquals(null, res.getString(16));
+    assertEquals(null, res.getString(17));
+    assertEquals(null, res.getString(18));
+    assertEquals(null, res.getString(19));
 
     // row 2
     assertTrue(res.next());
@@ -438,6 +442,7 @@ public class TestJdbcDriver2 extends TestCase {
     assertEquals(null, res.getString(17));
     assertEquals(null, res.getTimestamp(17));
     assertEquals(null, res.getBigDecimal(18));
+    assertEquals(null, res.getString(19));
 
     // row 3
     assertTrue(res.next());
@@ -460,6 +465,7 @@ public class TestJdbcDriver2 extends TestCase {
     assertEquals("2012-04-22 09:00:00.123456789", res.getString(17));
     assertEquals("2012-04-22 09:00:00.123456789", res.getTimestamp(17).toString());
     assertEquals("123456789.0123456", res.getBigDecimal(18).toString());
+    assertEquals("abcd", res.getString(19));
 
     // test getBoolean rules on non-boolean columns
     assertEquals(true, res.getBoolean(1));
diff --git a/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java b/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
index b3c34ba..8a6af9a 100644
--- a/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
+++ b/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
@@ -221,10 +221,16 @@ public class SQLOperation extends ExecuteStatementOperation {
   private static Object convertLazyToJava(Object o, ObjectInspector oi) {
     Object obj = ObjectInspectorUtils.copyToStandardObject(o, oi, ObjectInspectorCopyOption.JAVA);
 
+    if (obj == null) {
+      return obj;
+    }
+    if(oi.getTypeName().equals(serdeConstants.BINARY_TYPE_NAME)) {
+      return new String((byte[])obj);
+    }
     // for now, expose non-primitive as a string
     // TODO: expose non-primitive as a structured object while maintaining JDBC compliance
-    if (obj != null && oi.getCategory() != ObjectInspector.Category.PRIMITIVE) {
-      obj = obj.toString();
+    if (oi.getCategory() != ObjectInspector.Category.PRIMITIVE) {
+      return obj.toString();
     }
 
     return obj;
-- 
1.7.0.4

