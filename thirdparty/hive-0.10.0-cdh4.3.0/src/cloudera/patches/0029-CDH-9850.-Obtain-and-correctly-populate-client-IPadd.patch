From add84419ae40b0d84a542074664358a4642e84db Mon Sep 17 00:00:00 2001
From: Shreepadma Venugopalan <shreepadma@cloudera.com>
Date: Wed, 16 Jan 2013 14:40:26 -0800
Subject: [PATCH 029/121] CDH-9850. Obtain and correctly populate client IPaddress in HS2

---
 ql/src/java/org/apache/hadoop/hive/ql/Driver.java  |   12 +++-
 .../apache/hadoop/hive/ql/hooks/HookContext.java   |   11 +++-
 .../apache/hive/service/auth/HiveAuthFactory.java  |    4 +
 .../apache/hive/service/auth/PlainSaslHelper.java  |    6 +-
 .../org/apache/hive/service/cli/CLIService.java    |   31 +++++++++-
 .../hive/service/cli/operation/SQLOperation.java   |    2 +-
 .../hive/service/cli/session/HiveSession.java      |   12 +++-
 .../hive/service/cli/session/SessionManager.java   |   17 +++++-
 .../service/cli/thrift/TSetIpAddressProcessor.java |   68 ++++++++++++++++++++
 .../hive/service/cli/thrift/ThriftCLIService.java  |    9 ++-
 10 files changed, 161 insertions(+), 11 deletions(-)
 create mode 100644 service/src/java/org/apache/hive/service/cli/thrift/TSetIpAddressProcessor.java

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java b/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
index 411187c..cc75c7b 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/Driver.java
@@ -113,7 +113,7 @@ public class Driver implements CommandProcessor {
   static final private LogHelper console = new LogHelper(LOG);
 
   private static final Object compileMonitor = new Object();
-  
+
   private int maxRows = 100;
   ByteStream.Output bos = new ByteStream.Output();
 
@@ -131,6 +131,9 @@ public class Driver implements CommandProcessor {
   private int maxthreads;
   private static final int SLEEP_TIME = 2000;
   protected int tryCount = Integer.MAX_VALUE;
+  // This value is set only if the operation is launched through HiveServer2 and the underlying
+  // transport is derived from TSocket
+  private String ipAddress;
 
   private boolean checkLockManager() {
     boolean supportConcurrency = conf.getBoolVar(HiveConf.ConfVars.HIVE_SUPPORT_CONCURRENCY);
@@ -321,6 +324,11 @@ public class Driver implements CommandProcessor {
     this.conf = conf;
   }
 
+  public Driver(HiveConf conf, String ipAddress) {
+    this.conf = conf;
+    this.ipAddress = ipAddress;
+  }
+
   public Driver() {
     if (SessionState.get() != null) {
       conf = SessionState.get().getConf();
@@ -1065,7 +1073,7 @@ public class Driver implements CommandProcessor {
       }
       resStream = null;
 
-      HookContext hookContext = new HookContext(plan, conf, ctx.getPathToCS());
+      HookContext hookContext = new HookContext(plan, conf, ctx.getPathToCS(), ipAddress);
       hookContext.setHookType(HookContext.HookType.PRE_EXEC_HOOK);
 
       for (Hook peh : getHooks(HiveConf.ConfVars.PREEXECHOOKS)) {
diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java b/src/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java
index c9341c4..56e317a 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/hooks/HookContext.java
@@ -51,13 +51,15 @@ public class HookContext {
   private UserGroupInformation ugi;
   private HookType hookType;
   final private Map<String, ContentSummary> inputPathToContentSummary;
+  private final String ipAddress;
 
   public HookContext(QueryPlan queryPlan, HiveConf conf) throws Exception{
-    this(queryPlan, conf, new ConcurrentHashMap<String, ContentSummary>());
+    this(queryPlan, conf, new ConcurrentHashMap<String, ContentSummary>(), null);
   }
 
   public HookContext(QueryPlan queryPlan, HiveConf conf,
-      Map<String, ContentSummary> inputPathToContentSummary) throws Exception {
+      Map<String, ContentSummary> inputPathToContentSummary,
+      String ipAddress) throws Exception {
     this.queryPlan = queryPlan;
     this.conf = conf;
     this.inputPathToContentSummary = inputPathToContentSummary;
@@ -69,6 +71,7 @@ public class HookContext {
     if(SessionState.get() != null){
       linfo = SessionState.get().getLineageState().getLineageInfo();
     }
+    this.ipAddress = ipAddress;
   }
 
   public QueryPlan getQueryPlan() {
@@ -143,4 +146,8 @@ public class HookContext {
     this.hookType = hookType;
   }
 
+  public String getIpAddress() {
+    return this.ipAddress;
+  }
+
 }
diff --git a/src/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java b/src/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
index 3559823..7172fc4 100644
--- a/src/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
+++ b/src/service/src/java/org/apache/hive/service/auth/HiveAuthFactory.java
@@ -106,4 +106,8 @@ public class HiveAuthFactory {
       return null;
     }
   }
+
+  public String getIpAddress() {
+    return saslServer != null ? saslServer.getRemoteAddress().toString() : null;
+  }
 }
diff --git a/src/service/src/java/org/apache/hive/service/auth/PlainSaslHelper.java b/src/service/src/java/org/apache/hive/service/auth/PlainSaslHelper.java
index b9b6dfd..70934d7 100644
--- a/src/service/src/java/org/apache/hive/service/auth/PlainSaslHelper.java
+++ b/src/service/src/java/org/apache/hive/service/auth/PlainSaslHelper.java
@@ -30,8 +30,8 @@ import javax.security.sasl.SaslException;
 
 import org.apache.hive.service.auth.PlainSaslServer.ExternalAuthenticationCallback;
 import org.apache.hive.service.auth.PlainSaslServer.SaslPlainProvider;
-import org.apache.hive.service.cli.thrift.TCLIService;
 import org.apache.hive.service.cli.thrift.TCLIService.Iface;
+import org.apache.hive.service.cli.thrift.TSetIpAddressProcessor;
 import org.apache.hive.service.cli.thrift.ThriftCLIService;
 import org.apache.thrift.TProcessor;
 import org.apache.thrift.TProcessorFactory;
@@ -100,9 +100,11 @@ public class PlainSaslHelper {
       this.service = service;
     }
 
+    // Note that we do not do this in KerberosSaslHelper because we get the ipaddress differently in case of Sasl.
     @Override
     public TProcessor getProcessor(TTransport trans) {
-      return new TCLIService.Processor<Iface>(service);
+      // Note that we do not wrap the processor for kerberos. And handle it a bit differently.
+      return new TSetIpAddressProcessor<Iface>(service);
     }
   }
 
diff --git a/src/service/src/java/org/apache/hive/service/cli/CLIService.java b/src/service/src/java/org/apache/hive/service/cli/CLIService.java
index d682c1a..c5a2a65 100644
--- a/src/service/src/java/org/apache/hive/service/cli/CLIService.java
+++ b/src/service/src/java/org/apache/hive/service/cli/CLIService.java
@@ -28,6 +28,7 @@ import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;
 import org.apache.hadoop.hive.metastore.IMetaStoreClient;
 import org.apache.hive.service.CompositeService;
 import org.apache.hive.service.ServiceException;
+import org.apache.hive.service.cli.session.HiveSession;
 import org.apache.hive.service.cli.session.SessionManager;
 
 /**
@@ -87,6 +88,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     SessionHandle sessionHandle = sessionManager.openSession(username, password, configuration);
     LOG.info(sessionHandle + ": openSession()");
+    sessionManager.clearIpAddress();
     return sessionHandle;
   }
 
@@ -98,6 +100,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     sessionManager.closeSession(sessionHandle);
     LOG.info(sessionHandle + ": closeSession()");
+    sessionManager.clearIpAddress();
   }
 
   /* (non-Javadoc)
@@ -108,6 +111,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     GetInfoValue infoValue = sessionManager.getSession(sessionHandle).getInfo(getInfoType);
     LOG.info(sessionHandle + ": getInfo()");
+    sessionManager.clearIpAddress();
     return infoValue;
   }
 
@@ -120,6 +124,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle)
         .executeStatement(statement, confOverlay);
     LOG.info(sessionHandle + ": executeStatement()");
+    sessionManager.clearIpAddress();
     return opHandle;
   }
 
@@ -131,6 +136,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle).getTypeInfo();
     LOG.info(sessionHandle + ": getTypeInfo()");
+    sessionManager.clearIpAddress();
     return opHandle;
   }
 
@@ -142,6 +148,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle).getCatalogs();
     LOG.info(sessionHandle + ": getCatalogs()");
+    sessionManager.clearIpAddress();
     return opHandle;
   }
 
@@ -155,6 +162,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle)
         .getSchemas(catalogName, schemaName);
     LOG.info(sessionHandle + ": getSchemas()");
+    sessionManager.clearIpAddress();
     return opHandle;
   }
 
@@ -168,6 +176,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager
         .getSession(sessionHandle).getTables(catalogName, schemaName, tableName, tableTypes);
     LOG.info(sessionHandle + ": getTables()");
+    sessionManager.clearIpAddress();
     return opHandle;
   }
 
@@ -179,6 +188,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle).getTableTypes();
     LOG.info(sessionHandle + ": getTableTypes()");
+    sessionManager.clearIpAddress();
     return opHandle;
   }
 
@@ -192,6 +202,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle)
         .getColumns(catalogName, schemaName, tableName, columnName);
     LOG.info(sessionHandle + ": getColumns()");
+    sessionManager.clearIpAddress();
     return opHandle;
   }
 
@@ -205,6 +216,7 @@ public class CLIService extends CompositeService implements ICLIService {
     OperationHandle opHandle = sessionManager.getSession(sessionHandle)
         .getFunctions(catalogName, schemaName, functionName);
     LOG.info(sessionHandle + ": getFunctions()");
+    sessionManager.clearIpAddress();
     return opHandle;
   }
 
@@ -216,6 +228,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     OperationState opState = sessionManager.getOperationManager().getOperationState(opHandle);
     LOG.info(opHandle + ": getOperationStatus()");
+    sessionManager.clearIpAddress();
     return opState;
   }
 
@@ -227,7 +240,8 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     sessionManager.getOperationManager().cancelOperation(opHandle);
     LOG.info(opHandle + ": cancelOperation()");
-  }
+    sessionManager.clearIpAddress();
+    }
 
   /* (non-Javadoc)
    * @see org.apache.hive.service.cli.ICLIService#closeOperation(org.apache.hive.service.cli.OperationHandle)
@@ -237,6 +251,7 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     sessionManager.getOperationManager().closeOperation(opHandle);
     LOG.info(opHandle + ": closeOperation");
+    sessionManager.clearIpAddress();
   }
 
   /* (non-Javadoc)
@@ -248,6 +263,7 @@ public class CLIService extends CompositeService implements ICLIService {
     TableSchema tableSchema = sessionManager.getOperationManager()
         .getOperationResultSetSchema(opHandle);
     LOG.info(opHandle + ": getResultSetMetadata()");
+    sessionManager.clearIpAddress();
     return tableSchema;
   }
 
@@ -260,6 +276,7 @@ public class CLIService extends CompositeService implements ICLIService {
     RowSet rowSet = sessionManager.getOperationManager()
         .getOperationNextRowSet(opHandle, orientation, maxRows);
     LOG.info(opHandle + ": fetchResults()");
+    sessionManager.clearIpAddress();
     return rowSet;
   }
 
@@ -271,6 +288,18 @@ public class CLIService extends CompositeService implements ICLIService {
       throws HiveSQLException {
     RowSet rowSet = sessionManager.getOperationManager().getOperationNextRowSet(opHandle);
     LOG.info(opHandle + ": fetchResults()");
+    sessionManager.clearIpAddress();
     return rowSet;
   }
+
+  public void setIpAddress(SessionHandle sessionHandle, String ipAddress) {
+    try {
+      HiveSession session = sessionManager.getSession(sessionHandle);
+      session.setIpAddress(ipAddress);
+    } catch (HiveSQLException e) {
+      // This should not happen
+      LOG.error("Unable to get session to set ipAddress", e);
+    }
+  }
+
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java b/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
index 405f0c7..1445a67 100644
--- a/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
+++ b/src/service/src/java/org/apache/hive/service/cli/operation/SQLOperation.java
@@ -83,7 +83,7 @@ public class SQLOperation extends ExecuteStatementOperation {
     String SQLState = null;
 
     try {
-      driver = new Driver(getParentSession().getHiveConf());
+      driver = new Driver(getParentSession().getHiveConf(), getParentSession().getIpAddress());
       // In Hive server mode, we are not able to retry in the FetchTask
       // case, when calling fetch queries since execute() has returned.
       // For now, we disable the test attempts.
diff --git a/src/service/src/java/org/apache/hive/service/cli/session/HiveSession.java b/src/service/src/java/org/apache/hive/service/cli/session/HiveSession.java
index adef797..c8c2679 100644
--- a/src/service/src/java/org/apache/hive/service/cli/session/HiveSession.java
+++ b/src/service/src/java/org/apache/hive/service/cli/session/HiveSession.java
@@ -61,10 +61,12 @@ public class HiveSession {
   private SessionManager sessionManager;
   private OperationManager operationManager;
   private IMetaStoreClient metastoreClient = null;
+  private String ipAddress;
 
-  public HiveSession(String username, String password, Map<String, String> sessionConf) {
+  public HiveSession(String username, String password, Map<String, String> sessionConf, String ipAddress) {
     this.username = username;
     this.password = password;
+    this.ipAddress = ipAddress;
 
     if (sessionConf != null) {
       sessionConf.putAll(sessionConf);
@@ -262,4 +264,12 @@ public class HiveSession {
     return sessionState;
   }
 
+  public String getIpAddress() {
+    return ipAddress;
+  }
+
+  public String setIpAddress(String ipAddress) {
+    return this.ipAddress = ipAddress;
+  }
+
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java b/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
index adca1bb..880e72b 100644
--- a/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
+++ b/src/service/src/java/org/apache/hive/service/cli/session/SessionManager.java
@@ -65,7 +65,7 @@ public class SessionManager extends CompositeService {
 
 
   public SessionHandle openSession(String username, String password, Map<String, String> sessionConf) {
-    HiveSession session = new HiveSession(username, password, sessionConf);
+    HiveSession session = new HiveSession(username, password, sessionConf, threadLocalIpAddress.get());
     session.setSessionManager(this);
     session.setOperationManager(operationManager);
     handleToSession.put(session.getSessionHandle(), session);
@@ -93,4 +93,19 @@ public class SessionManager extends CompositeService {
     return operationManager;
   }
 
+  private static ThreadLocal<String> threadLocalIpAddress = new ThreadLocal<String>() {
+    @Override
+    protected synchronized String initialValue() {
+      return null;
+    }
+  };
+
+  public static void setIpAddress(String ipAddress) {
+    threadLocalIpAddress.set(ipAddress);
+  }
+
+  public void clearIpAddress() {
+    threadLocalIpAddress.remove();
+  }
+
 }
diff --git a/src/service/src/java/org/apache/hive/service/cli/thrift/TSetIpAddressProcessor.java b/src/service/src/java/org/apache/hive/service/cli/thrift/TSetIpAddressProcessor.java
new file mode 100644
index 0000000..e4739bd
--- /dev/null
+++ b/src/service/src/java/org/apache/hive/service/cli/thrift/TSetIpAddressProcessor.java
@@ -0,0 +1,68 @@
+package org.apache.hive.service.cli.thrift;
+
+import java.net.Socket;
+
+import org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Processor;
+import org.apache.hive.service.cli.session.SessionManager;
+import org.apache.hive.service.cli.thrift.TCLIService.Iface;
+import org.apache.thrift.TException;
+import org.apache.thrift.protocol.TProtocol;
+import org.apache.thrift.transport.TSaslClientTransport;
+import org.apache.thrift.transport.TSaslServerTransport;
+import org.apache.thrift.transport.TSocket;
+import org.apache.thrift.transport.TTransport;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * This class is responsible for setting the ipAddress for operations executed via HiveServer2.
+ * <p>
+ * <ul>
+ * <li>Ipaddress is only set for operations that calls listeners with hookContext @see ExecuteWithHookContext.</li>
+ * <li>Ipaddress is only set if the underlying transport mechanism is socket. </li>
+ * </ul>
+ * </p>
+ */
+public class TSetIpAddressProcessor<I extends Iface> extends TCLIService.Processor<Iface> {
+
+  private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
+
+  public TSetIpAddressProcessor(Iface iface) {
+    super(iface);
+  }
+
+  @Override
+  public boolean process(final TProtocol in, final TProtocol out) throws TException {
+    setIpAddress(in);
+    return super.process(in, out);
+  }
+
+  protected void setIpAddress(final TProtocol in) {
+    TTransport transport = in.getTransport();
+    TSocket tSocket = getUnderlyingSocketFromTransport(transport);
+    if (tSocket != null) {
+     setIpAddress(tSocket.getSocket());
+    } else {
+      LOGGER.warn("Unknown Transport, cannot determine ipAddress");
+    }
+  }
+
+  private void setIpAddress(Socket socket) {
+    SessionManager.setIpAddress(socket.getInetAddress().toString());
+  }
+
+  private TSocket getUnderlyingSocketFromTransport(TTransport transport) {
+    while (transport != null) {
+      if (transport instanceof TSaslServerTransport) {
+        transport = ((TSaslServerTransport) transport).getUnderlyingTransport();
+      }
+      if (transport instanceof TSaslClientTransport) {
+        transport = ((TSaslClientTransport) transport).getUnderlyingTransport();
+      }
+      if (transport instanceof TSocket) {
+        return (TSocket) transport;
+      }
+    }
+    return null;
+  }
+}
\ No newline at end of file
diff --git a/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java b/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java
index 46689c3..8f18dfe 100644
--- a/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java
+++ b/src/service/src/java/org/apache/hive/service/cli/thrift/ThriftCLIService.java
@@ -28,6 +28,7 @@ import org.apache.hadoop.hive.conf.HiveConf;
 import org.apache.hadoop.hive.conf.HiveConf.ConfVars;
 import org.apache.hive.service.AbstractService;
 import org.apache.hive.service.auth.HiveAuthFactory;
+import org.apache.hive.service.cli.CLIService;
 import org.apache.hive.service.cli.FetchOrientation;
 import org.apache.hive.service.cli.GetInfoType;
 import org.apache.hive.service.cli.GetInfoValue;
@@ -35,7 +36,6 @@ import org.apache.hive.service.cli.HiveSQLException;
 import org.apache.hive.service.cli.OperationHandle;
 import org.apache.hive.service.cli.OperationState;
 import org.apache.hive.service.cli.RowSet;
-import org.apache.hive.service.cli.CLIService;
 import org.apache.hive.service.cli.SessionHandle;
 import org.apache.hive.service.cli.TableSchema;
 import org.apache.thrift.TException;
@@ -110,14 +110,21 @@ public class ThriftCLIService extends AbstractService implements TCLIService.Ifa
     TOpenSessionResp resp = new TOpenSessionResp();
     try {
       String userName;
+      String ipAddress = null;
       if (hiveAuthFactory != null
           && hiveAuthFactory.getRemoteUser() != null) {
         userName = hiveAuthFactory.getRemoteUser();
+        ipAddress = hiveAuthFactory.getIpAddress();
       } else {
         userName = req.getUsername();
       }
       SessionHandle sessionHandle = cliService
           .openSession(userName, req.getPassword(), req.getConfiguration());
+      // Cannot break the b/w compatibility of API to accept ipAddress as another parameter in
+      // openSession call. Hence making this call
+      if (ipAddress != null) {
+        cliService.setIpAddress(sessionHandle, ipAddress);
+      }
       resp.setSessionHandle(sessionHandle.toTSessionHandle());
       // TODO: set real configuration map
       resp.setConfiguration(new HashMap<String, String>());
-- 
1.7.0.4

