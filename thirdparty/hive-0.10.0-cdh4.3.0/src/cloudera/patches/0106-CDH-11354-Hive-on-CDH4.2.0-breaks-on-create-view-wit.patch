From cb7602e34604f63961c87bfbc995156f8fae70c4 Mon Sep 17 00:00:00 2001
From: Prasad Mujumdar <prasadm@cloudera.com>
Date: Thu, 2 May 2013 12:59:44 -0700
Subject: [PATCH 106/121] CDH-11354:Hive on CDH4.2.0 breaks on create view with joins

---
 .../hadoop/hive/ql/parse/UnparseTranslator.java    |   66 ++++++--------------
 ql/src/test/queries/clientpositive/view_cast.q     |   11 +++
 ql/src/test/results/clientpositive/view_cast.q.out |   42 ++++++++++++
 3 files changed, 73 insertions(+), 46 deletions(-)
 create mode 100644 ql/src/test/queries/clientpositive/view_cast.q
 create mode 100644 ql/src/test/results/clientpositive/view_cast.q.out

diff --git a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/UnparseTranslator.java b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/UnparseTranslator.java
index ec2c088..8fe2262 100644
--- a/src/ql/src/java/org/apache/hadoop/hive/ql/parse/UnparseTranslator.java
+++ b/src/ql/src/java/org/apache/hadoop/hive/ql/parse/UnparseTranslator.java
@@ -94,61 +94,35 @@ class UnparseTranslator {
 
     int tokenStartIndex = node.getTokenStartIndex();
     int tokenStopIndex = node.getTokenStopIndex();
-
     Translation translation = new Translation();
     translation.tokenStopIndex = tokenStopIndex;
     translation.replacementText = replacementText;
 
     // Sanity check for overlap with regions already being expanded
     assert (tokenStopIndex >= tokenStartIndex);
-    Map.Entry<Integer, Translation> existingEntry;
-    existingEntry = translations.floorEntry(tokenStartIndex);
-    boolean prefix = false;
-    if (existingEntry != null) {
-      if (existingEntry.getKey().equals(tokenStartIndex)) {
-        if (existingEntry.getValue().tokenStopIndex == tokenStopIndex) {
-          if (existingEntry.getValue().replacementText.equals(replacementText)) {
-            // exact match for existing mapping: somebody is doing something
-            // redundant, but we'll let it pass
-            return;
-          }
-        } else if (tokenStopIndex > existingEntry.getValue().tokenStopIndex) {
-          // is existing mapping a prefix for new mapping? if so, that's also
-          // redundant, but in this case we need to expand it
-          prefix = replacementText.startsWith(
-            existingEntry.getValue().replacementText);
-          assert(prefix);
-        } else {
-          // new mapping is a prefix for existing mapping:  ignore it
-          prefix = existingEntry.getValue().replacementText.startsWith(
-            replacementText);
-          assert(prefix);
-          return;
-        }
-      }
-      if (!prefix) {
-        assert (existingEntry.getValue().tokenStopIndex < tokenStartIndex);
-      }
-    }
-    if (!prefix) {
-      existingEntry = translations.ceilingEntry(tokenStartIndex);
-      if (existingEntry != null) {
-        assert (existingEntry.getKey() > tokenStopIndex);
-      }
-    }
 
-    // Is existing entry a suffix of the newer entry and a subset of it?
-    existingEntry = translations.floorEntry(tokenStopIndex);
-    if (existingEntry != null) {
-      if (existingEntry.getKey().equals(tokenStopIndex)) {
-        if (tokenStartIndex < existingEntry.getKey() &&
-            tokenStopIndex == existingEntry.getKey()) {
-          // Seems newer entry is a super-set of existing entry, remove existing entry
-          assert (replacementText.endsWith(existingEntry.getValue().replacementText));
-          translations.remove(tokenStopIndex);
-        }
+    List<Integer> subsetEntries = new ArrayList<Integer>();
+    // Is the existing entry and newer entry are subset of one another ?
+    for (Map.Entry<Integer, Translation> existingEntry :
+          translations.headMap(tokenStopIndex, true).entrySet()) {
+      // check if the new entry contains the existing
+      if (existingEntry.getValue().tokenStopIndex <= tokenStopIndex &&
+            existingEntry.getKey() >= tokenStartIndex) {
+        // Collect newer entry is if a super-set of existing entry,
+        assert (replacementText.contains(existingEntry.getValue().replacementText));
+        subsetEntries.add(existingEntry.getKey());
+        // check if the existing entry contains the new
+      } else if (existingEntry.getValue().tokenStopIndex >= tokenStopIndex &&
+            existingEntry.getKey() <= tokenStartIndex) {
+        assert (existingEntry.getValue().replacementText.contains(replacementText));
+        // we don't need to add this new entry since there's already an overlapping one
+        return;
       }
     }
+    // remove any existing entries that are contained by the new one
+    for (Integer index : subsetEntries) {
+      translations.remove(index);
+    }
 
     // It's all good: create a new entry in the map (or update existing one)
     translations.put(tokenStartIndex, translation);
diff --git a/src/ql/src/test/queries/clientpositive/view_cast.q b/src/ql/src/test/queries/clientpositive/view_cast.q
new file mode 100644
index 0000000..f7ef9ec
--- /dev/null
+++ b/src/ql/src/test/queries/clientpositive/view_cast.q
@@ -0,0 +1,11 @@
+DROP TABLE IF EXISTS atab; 
+CREATE TABLE IF NOT EXISTS atab (ks_uid BIGINT, sr_uid STRING, sr_id STRING, tstamp STRING, m_id STRING, action STRING, at_sr_uid STRING, tstamp_type STRING, original_m_id STRING, original_tstamp STRING, registered_flag TINYINT, at_ks_uid BIGINT) PARTITIONED BY (dt STRING,network_abbr STRING); 
+
+DROP TABLE IF EXISTS  mstab;
+CREATE TABLE  mstab(ks_uid INT, csc INT) PARTITIONED BY (dt STRING);
+
+DROP VIEW IF EXISTS aa_view_tw;
+CREATE VIEW aa_view_tw AS SELECT ks_uid, sr_id, action, at_ks_uid, at_sr_uid, from_unixtime(CAST(CAST( tstamp as BIGINT)/1000 AS BIGINT),'yyyyMMdd') AS action_date, from_unixtime(CAST(CAST( original_tstamp AS BIGINT)/1000 AS BIGINT),'yyyyMMdd') AS content_creation_date FROM atab WHERE dt='20130312' AND network_abbr='tw' AND ks_uid != at_ks_uid;
+
+DROP VIEW IF EXISTS joined_aa_view_tw;
+CREATE VIEW joined_aa_view_tw AS SELECT aa.ks_uid, aa.sr_id, aa.action, at_sr_uid, aa.action_date, aa.at_ks_uid, aa.content_creation_date, coalesce( other.ksc, 10.0) AS at_ksc, coalesce( self.ksc , 10.0 ) AS self_ksc FROM aa_view_tw aa LEFT OUTER JOIN ( SELECT ks_uid, csc AS ksc FROM mstab WHERE dt='20130311' ) self ON ( CAST(aa.ks_uid AS BIGINT) = CAST(self.ks_uid AS BIGINT) ) LEFT OUTER JOIN ( SELECT ks_uid, csc AS ksc FROM mstab WHERE dt='20130311' ) other ON ( CAST(aa.at_ks_uid AS BIGINT) = CAST(other.ks_uid AS BIGINT) );
diff --git a/src/ql/src/test/results/clientpositive/view_cast.q.out b/src/ql/src/test/results/clientpositive/view_cast.q.out
new file mode 100644
index 0000000..ecd9e71
--- /dev/null
+++ b/src/ql/src/test/results/clientpositive/view_cast.q.out
@@ -0,0 +1,42 @@
+PREHOOK: query: DROP TABLE IF EXISTS atab
+PREHOOK: type: DROPTABLE
+POSTHOOK: query: DROP TABLE IF EXISTS atab
+POSTHOOK: type: DROPTABLE
+PREHOOK: query: CREATE TABLE IF NOT EXISTS atab (ks_uid BIGINT, sr_uid STRING, sr_id STRING, tstamp STRING, m_id STRING, action STRING, at_sr_uid STRING, tstamp_type STRING, original_m_id STRING, original_tstamp STRING, registered_flag TINYINT, at_ks_uid BIGINT) PARTITIONED BY (dt STRING,network_abbr STRING)
+PREHOOK: type: CREATETABLE
+POSTHOOK: query: CREATE TABLE IF NOT EXISTS atab (ks_uid BIGINT, sr_uid STRING, sr_id STRING, tstamp STRING, m_id STRING, action STRING, at_sr_uid STRING, tstamp_type STRING, original_m_id STRING, original_tstamp STRING, registered_flag TINYINT, at_ks_uid BIGINT) PARTITIONED BY (dt STRING,network_abbr STRING)
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: default@atab
+PREHOOK: query: DROP TABLE IF EXISTS  mstab
+PREHOOK: type: DROPTABLE
+POSTHOOK: query: DROP TABLE IF EXISTS  mstab
+POSTHOOK: type: DROPTABLE
+PREHOOK: query: CREATE TABLE  mstab(ks_uid INT, csc INT) PARTITIONED BY (dt STRING)
+PREHOOK: type: CREATETABLE
+POSTHOOK: query: CREATE TABLE  mstab(ks_uid INT, csc INT) PARTITIONED BY (dt STRING)
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: default@mstab
+PREHOOK: query: DROP VIEW IF EXISTS aa_view_tw
+PREHOOK: type: DROPVIEW
+POSTHOOK: query: DROP VIEW IF EXISTS aa_view_tw
+POSTHOOK: type: DROPVIEW
+PREHOOK: query: CREATE VIEW aa_view_tw AS SELECT ks_uid, sr_id, action, at_ks_uid, at_sr_uid, from_unixtime(CAST(CAST( tstamp as BIGINT)/1000 AS BIGINT),'yyyyMMdd') AS action_date, from_unixtime(CAST(CAST( original_tstamp AS BIGINT)/1000 AS BIGINT),'yyyyMMdd') AS content_creation_date FROM atab WHERE dt='20130312' AND network_abbr='tw' AND ks_uid != at_ks_uid
+PREHOOK: type: CREATEVIEW
+#### A masked pattern was here ####
+POSTHOOK: query: CREATE VIEW aa_view_tw AS SELECT ks_uid, sr_id, action, at_ks_uid, at_sr_uid, from_unixtime(CAST(CAST( tstamp as BIGINT)/1000 AS BIGINT),'yyyyMMdd') AS action_date, from_unixtime(CAST(CAST( original_tstamp AS BIGINT)/1000 AS BIGINT),'yyyyMMdd') AS content_creation_date FROM atab WHERE dt='20130312' AND network_abbr='tw' AND ks_uid != at_ks_uid
+POSTHOOK: type: CREATEVIEW
+POSTHOOK: Output: default@aa_view_tw
+#### A masked pattern was here ####
+PREHOOK: query: DROP VIEW IF EXISTS joined_aa_view_tw
+PREHOOK: type: DROPVIEW
+POSTHOOK: query: DROP VIEW IF EXISTS joined_aa_view_tw
+POSTHOOK: type: DROPVIEW
+PREHOOK: query: CREATE VIEW joined_aa_view_tw AS SELECT aa.ks_uid, aa.sr_id, aa.action, at_sr_uid, aa.action_date, aa.at_ks_uid, aa.content_creation_date, coalesce( other.ksc, 10.0) AS at_ksc, coalesce( self.ksc , 10.0 ) AS self_ksc FROM aa_view_tw aa LEFT OUTER JOIN ( SELECT ks_uid, csc AS ksc FROM mstab WHERE dt='20130311' ) self ON ( CAST(aa.ks_uid AS BIGINT) = CAST(self.ks_uid AS BIGINT) ) LEFT OUTER JOIN ( SELECT ks_uid, csc AS ksc FROM mstab WHERE dt='20130311' ) other ON ( CAST(aa.at_ks_uid AS BIGINT) = CAST(other.ks_uid AS BIGINT) )
+PREHOOK: type: CREATEVIEW
+PREHOOK: Input: default@aa_view_tw
+#### A masked pattern was here ####
+POSTHOOK: query: CREATE VIEW joined_aa_view_tw AS SELECT aa.ks_uid, aa.sr_id, aa.action, at_sr_uid, aa.action_date, aa.at_ks_uid, aa.content_creation_date, coalesce( other.ksc, 10.0) AS at_ksc, coalesce( self.ksc , 10.0 ) AS self_ksc FROM aa_view_tw aa LEFT OUTER JOIN ( SELECT ks_uid, csc AS ksc FROM mstab WHERE dt='20130311' ) self ON ( CAST(aa.ks_uid AS BIGINT) = CAST(self.ks_uid AS BIGINT) ) LEFT OUTER JOIN ( SELECT ks_uid, csc AS ksc FROM mstab WHERE dt='20130311' ) other ON ( CAST(aa.at_ks_uid AS BIGINT) = CAST(other.ks_uid AS BIGINT) )
+POSTHOOK: type: CREATEVIEW
+POSTHOOK: Input: default@aa_view_tw
+POSTHOOK: Output: default@joined_aa_view_tw
+#### A masked pattern was here ####
-- 
1.7.0.4

